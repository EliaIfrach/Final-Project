-- -------------------------------------------------------------
--
-- Module: HPF_FIR_2_V3
-- Generated by MATLAB(R) 9.10 and Filter Design HDL Coder 3.1.9.
-- Generated on: 2022-12-21 11:51:50
-- -------------------------------------------------------------

-- -------------------------------------------------------------
-- HDL Code Generation Options:
--
-- TargetLanguage: VHDL
-- FIRAdderStyle: tree
-- OptimizeForHDL: on
-- TargetDirectory: C:\Users\Elia Yfrach\Desktop\Project\Processing_Unit\Filters
-- AddPipelineRegisters: on
-- Name: HPF_FIR_2_V3
-- TestBenchName: HPF_FIR_2_V3_tb
-- TestBenchStimulus: impulse step ramp chirp noise 
-- GenerateHDLTestBench: off

-- Filter Specifications:
--
-- Sample Rate     : 765.9 Hz
-- Response        : Highpass
-- Specification   : Fst,Fp,Ast,Ap
-- Stopband Edge   : 100 pHz
-- Passband Ripple : 1 dB
-- Passband Edge   : 150 Hz
-- Stopband Atten. : 40 dB
-- -------------------------------------------------------------

-- -------------------------------------------------------------
-- HDL Implementation    : Fully parallel
-- Folding Factor        : 1
-- -------------------------------------------------------------
-- Filter Settings:
--
-- Discrete-Time FIR Filter (real)
-- -------------------------------
-- Filter Structure  : Direct-Form FIR
-- Filter Length     : 7
-- Stable            : Yes
-- Linear Phase      : Yes (Type 1)
-- Arithmetic        : fixed
-- Numerator         : s16,15 -> [-1 1)
-- Input             : s9,0 -> [-256 256)
-- Filter Internals  : Full Precision
--   Output          : s25,15 -> [-512 512)  (auto determined)
--   Product         : s24,15 -> [-256 256)  (auto determined)
--   Accumulator     : s25,15 -> [-512 512)  (auto determined)
--   Round Mode      : No rounding
--   Overflow Mode   : No overflow
-- -------------------------------------------------------------



LIBRARY IEEE;
USE IEEE.std_logic_1164.all;
USE IEEE.numeric_std.ALL;

ENTITY HPF_FIR_2_V3 IS
   PORT( clk                             :   IN    std_logic; 
         clk_enable                      :   IN    std_logic; 
         reset                           :   IN    std_logic; 
         filter_in                       :   IN    std_logic_vector(8 DOWNTO 0); -- sfix9
         filter_out                      :   OUT   std_logic_vector(24 DOWNTO 0)  -- sfix25_En15
         );

END HPF_FIR_2_V3;


----------------------------------------------------------------
--Module Architecture: HPF_FIR_2_V3
----------------------------------------------------------------
ARCHITECTURE rtl OF HPF_FIR_2_V3 IS
  -- Local Functions
  -- Type Definitions
  TYPE delay_pipeline_type IS ARRAY (NATURAL range <>) OF signed(8 DOWNTO 0); -- sfix9
  -- Constants
  CONSTANT coeff1                         : signed(15 DOWNTO 0) := to_signed(-2114, 16); -- sfix16_En15
  CONSTANT coeff2                         : signed(15 DOWNTO 0) := to_signed(-4225, 16); -- sfix16_En15
  CONSTANT coeff3                         : signed(15 DOWNTO 0) := to_signed(-6337, 16); -- sfix16_En15
  CONSTANT coeff4                         : signed(15 DOWNTO 0) := to_signed(25571, 16); -- sfix16_En15
  CONSTANT coeff5                         : signed(15 DOWNTO 0) := to_signed(-6337, 16); -- sfix16_En15
  CONSTANT coeff6                         : signed(15 DOWNTO 0) := to_signed(-4225, 16); -- sfix16_En15
  CONSTANT coeff7                         : signed(15 DOWNTO 0) := to_signed(-2114, 16); -- sfix16_En15

  -- Signals
  SIGNAL delay_pipeline                   : delay_pipeline_type(0 TO 6); -- sfix9
  SIGNAL product7                         : signed(23 DOWNTO 0); -- sfix24_En15
  SIGNAL mul_temp                         : signed(24 DOWNTO 0); -- sfix25_En15
  SIGNAL product6                         : signed(23 DOWNTO 0); -- sfix24_En15
  SIGNAL mul_temp_1                       : signed(24 DOWNTO 0); -- sfix25_En15
  SIGNAL product5                         : signed(23 DOWNTO 0); -- sfix24_En15
  SIGNAL mul_temp_2                       : signed(24 DOWNTO 0); -- sfix25_En15
  SIGNAL product4                         : signed(23 DOWNTO 0); -- sfix24_En15
  SIGNAL mul_temp_3                       : signed(24 DOWNTO 0); -- sfix25_En15
  SIGNAL product3                         : signed(23 DOWNTO 0); -- sfix24_En15
  SIGNAL mul_temp_4                       : signed(24 DOWNTO 0); -- sfix25_En15
  SIGNAL product2                         : signed(23 DOWNTO 0); -- sfix24_En15
  SIGNAL mul_temp_5                       : signed(24 DOWNTO 0); -- sfix25_En15
  SIGNAL product1                         : signed(23 DOWNTO 0); -- sfix24_En15
  SIGNAL mul_temp_6                       : signed(24 DOWNTO 0); -- sfix25_En15
  SIGNAL sum_final                        : signed(24 DOWNTO 0); -- sfix25_En15
  SIGNAL sum1_1                           : signed(24 DOWNTO 0); -- sfix25_En15
  SIGNAL sumpipe1_1                       : signed(24 DOWNTO 0); -- sfix25_En15
  SIGNAL sum1_2                           : signed(24 DOWNTO 0); -- sfix25_En15
  SIGNAL sumpipe1_2                       : signed(24 DOWNTO 0); -- sfix25_En15
  SIGNAL sum1_3                           : signed(24 DOWNTO 0); -- sfix25_En15
  SIGNAL sumpipe1_3                       : signed(24 DOWNTO 0); -- sfix25_En15
  SIGNAL sumpipe1_4                       : signed(23 DOWNTO 0); -- sfix24_En15
  SIGNAL sum2_1                           : signed(24 DOWNTO 0); -- sfix25_En15
  SIGNAL add_temp                         : signed(25 DOWNTO 0); -- sfix26_En15
  SIGNAL sumpipe2_1                       : signed(24 DOWNTO 0); -- sfix25_En15
  SIGNAL sum2_2                           : signed(24 DOWNTO 0); -- sfix25_En15
  SIGNAL add_temp_1                       : signed(25 DOWNTO 0); -- sfix26_En15
  SIGNAL sumpipe2_2                       : signed(24 DOWNTO 0); -- sfix25_En15
  SIGNAL sum3_1                           : signed(24 DOWNTO 0); -- sfix25_En15
  SIGNAL add_temp_2                       : signed(25 DOWNTO 0); -- sfix26_En15
  SIGNAL sumpipe3_1                       : signed(24 DOWNTO 0); -- sfix25_En15
  SIGNAL output_typeconvert               : signed(24 DOWNTO 0); -- sfix25_En15
  SIGNAL output_register                  : signed(24 DOWNTO 0); -- sfix25_En15


BEGIN

  -- Block Statements
  Delay_Pipeline_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delay_pipeline(0 TO 6) <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        delay_pipeline(0) <= signed(filter_in);
        delay_pipeline(1 TO 6) <= delay_pipeline(0 TO 5);
      END IF;
    END IF; 
  END PROCESS Delay_Pipeline_process;

  mul_temp <= delay_pipeline(6) * coeff7;
  product7 <= mul_temp(23 DOWNTO 0);

  mul_temp_1 <= delay_pipeline(5) * coeff6;
  product6 <= mul_temp_1(23 DOWNTO 0);

  mul_temp_2 <= delay_pipeline(4) * coeff5;
  product5 <= mul_temp_2(23 DOWNTO 0);

  mul_temp_3 <= delay_pipeline(3) * coeff4;
  product4 <= mul_temp_3(23 DOWNTO 0);

  mul_temp_4 <= delay_pipeline(2) * coeff3;
  product3 <= mul_temp_4(23 DOWNTO 0);

  mul_temp_5 <= delay_pipeline(1) * coeff2;
  product2 <= mul_temp_5(23 DOWNTO 0);

  mul_temp_6 <= delay_pipeline(0) * coeff1;
  product1 <= mul_temp_6(23 DOWNTO 0);

  sum1_1 <= resize(product7, 25) + resize(product6, 25);

  sum1_2 <= resize(product5, 25) + resize(product4, 25);

  sum1_3 <= resize(product3, 25) + resize(product2, 25);

  temp_process1 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sumpipe1_1 <= (OTHERS => '0');
      sumpipe1_2 <= (OTHERS => '0');
      sumpipe1_3 <= (OTHERS => '0');
      sumpipe1_4 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        sumpipe1_1 <= sum1_1;
        sumpipe1_2 <= sum1_2;
        sumpipe1_3 <= sum1_3;
        sumpipe1_4 <= product1;
      END IF;
    END IF; 
  END PROCESS temp_process1;

  add_temp <= resize(sumpipe1_1, 26) + resize(sumpipe1_2, 26);
  sum2_1 <= add_temp(24 DOWNTO 0);

  add_temp_1 <= resize(sumpipe1_3, 26) + resize(sumpipe1_4, 26);
  sum2_2 <= add_temp_1(24 DOWNTO 0);

  temp_process2 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sumpipe2_1 <= (OTHERS => '0');
      sumpipe2_2 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        sumpipe2_1 <= sum2_1;
        sumpipe2_2 <= sum2_2;
      END IF;
    END IF; 
  END PROCESS temp_process2;

  add_temp_2 <= resize(sumpipe2_1, 26) + resize(sumpipe2_2, 26);
  sum3_1 <= add_temp_2(24 DOWNTO 0);

  temp_process3 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sumpipe3_1 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        sumpipe3_1 <= sum3_1;
      END IF;
    END IF; 
  END PROCESS temp_process3;

  sum_final <= sumpipe3_1;

  output_typeconvert <= sum_final;

  Output_Register_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      output_register <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        output_register <= output_typeconvert;
      END IF;
    END IF; 
  END PROCESS Output_Register_process;

  -- Assignment Statements
  filter_out <= std_logic_vector(output_register);
END rtl;
