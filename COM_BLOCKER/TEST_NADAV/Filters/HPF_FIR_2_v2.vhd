-- -------------------------------------------------------------
--
-- Module: HPF_FIR_2_v2
-- Generated by MATLAB(R) 9.10 and Filter Design HDL Coder 3.1.9.
-- Generated on: 2022-12-18 16:10:56
-- -------------------------------------------------------------

-- -------------------------------------------------------------
-- HDL Code Generation Options:
--
-- TargetLanguage: VHDL
-- TargetDirectory: C:\Users\Elia Yfrach\Desktop\Project\Processing_Unit\Filters
-- Name: HPF_FIR_2_v2
-- TestBenchName: HPF_FIR_2_v2_tb
-- TestBenchStimulus: impulse step ramp chirp noise 
-- GenerateHDLTestBench: off

-- Filter Specifications:
--
-- Sample Rate     : 765.9 Hz
-- Response        : Highpass
-- Specification   : Fst,Fp,Ast,Ap
-- Passband Edge   : 150 Hz
-- Stopband Atten. : 40 dB
-- Passband Ripple : 1 dB
-- Stopband Edge   : 100 nHz
-- -------------------------------------------------------------

-- -------------------------------------------------------------
-- HDL Implementation    : Fully parallel
-- Folding Factor        : 1
-- -------------------------------------------------------------
-- Filter Settings:
--
-- Discrete-Time FIR Filter (real)
-- -------------------------------
-- Filter Structure  : Direct-Form FIR
-- Filter Length     : 7
-- Stable            : Yes
-- Linear Phase      : Yes (Type 1)
-- Arithmetic        : fixed
-- Numerator         : s16,15 -> [-1 1)
-- Input             : s30,0 -> [-536870912 536870912)
-- Filter Internals  : Full Precision
--   Output          : s46,15 -> [-1073741824 1073741824)  (auto determined)
--   Product         : s45,15 -> [-536870912 536870912)  (auto determined)
--   Accumulator     : s46,15 -> [-1073741824 1073741824)  (auto determined)
--   Round Mode      : No rounding
--   Overflow Mode   : No overflow
-- -------------------------------------------------------------



LIBRARY IEEE;
USE IEEE.std_logic_1164.all;
USE IEEE.numeric_std.ALL;

ENTITY HPF_FIR_2_v2 IS
   PORT( clk                             :   IN    std_logic; 
         clk_enable                      :   IN    std_logic; 
         reset                           :   IN    std_logic; 
         filter_in                       :   IN    std_logic_vector(29 DOWNTO 0); -- sfix30
         filter_out                      :   OUT   std_logic_vector(45 DOWNTO 0)  -- sfix46_En15
         );

END HPF_FIR_2_v2;


----------------------------------------------------------------
--Module Architecture: HPF_FIR_2_v2
----------------------------------------------------------------
ARCHITECTURE rtl OF HPF_FIR_2_v2 IS
  -- Local Functions
  -- Type Definitions
  TYPE delay_pipeline_type IS ARRAY (NATURAL range <>) OF signed(29 DOWNTO 0); -- sfix30
  -- Constants
  CONSTANT coeff1                         : signed(15 DOWNTO 0) := to_signed(-2114, 16); -- sfix16_En15
  CONSTANT coeff2                         : signed(15 DOWNTO 0) := to_signed(-4225, 16); -- sfix16_En15
  CONSTANT coeff3                         : signed(15 DOWNTO 0) := to_signed(-6337, 16); -- sfix16_En15
  CONSTANT coeff4                         : signed(15 DOWNTO 0) := to_signed(25571, 16); -- sfix16_En15
  CONSTANT coeff5                         : signed(15 DOWNTO 0) := to_signed(-6337, 16); -- sfix16_En15
  CONSTANT coeff6                         : signed(15 DOWNTO 0) := to_signed(-4225, 16); -- sfix16_En15
  CONSTANT coeff7                         : signed(15 DOWNTO 0) := to_signed(-2114, 16); -- sfix16_En15

  -- Signals
  SIGNAL delay_pipeline                   : delay_pipeline_type(0 TO 6); -- sfix30
  SIGNAL product7                         : signed(44 DOWNTO 0); -- sfix45_En15
  SIGNAL mul_temp                         : signed(45 DOWNTO 0); -- sfix46_En15
  SIGNAL product6                         : signed(44 DOWNTO 0); -- sfix45_En15
  SIGNAL mul_temp_1                       : signed(45 DOWNTO 0); -- sfix46_En15
  SIGNAL product5                         : signed(44 DOWNTO 0); -- sfix45_En15
  SIGNAL mul_temp_2                       : signed(45 DOWNTO 0); -- sfix46_En15
  SIGNAL product4                         : signed(44 DOWNTO 0); -- sfix45_En15
  SIGNAL mul_temp_3                       : signed(45 DOWNTO 0); -- sfix46_En15
  SIGNAL product3                         : signed(44 DOWNTO 0); -- sfix45_En15
  SIGNAL mul_temp_4                       : signed(45 DOWNTO 0); -- sfix46_En15
  SIGNAL product2                         : signed(44 DOWNTO 0); -- sfix45_En15
  SIGNAL mul_temp_5                       : signed(45 DOWNTO 0); -- sfix46_En15
  SIGNAL product1_cast                    : signed(45 DOWNTO 0); -- sfix46_En15
  SIGNAL product1                         : signed(44 DOWNTO 0); -- sfix45_En15
  SIGNAL mul_temp_6                       : signed(45 DOWNTO 0); -- sfix46_En15
  SIGNAL sum1                             : signed(45 DOWNTO 0); -- sfix46_En15
  SIGNAL add_temp                         : signed(46 DOWNTO 0); -- sfix47_En15
  SIGNAL sum2                             : signed(45 DOWNTO 0); -- sfix46_En15
  SIGNAL add_temp_1                       : signed(46 DOWNTO 0); -- sfix47_En15
  SIGNAL sum3                             : signed(45 DOWNTO 0); -- sfix46_En15
  SIGNAL add_temp_2                       : signed(46 DOWNTO 0); -- sfix47_En15
  SIGNAL sum4                             : signed(45 DOWNTO 0); -- sfix46_En15
  SIGNAL add_temp_3                       : signed(46 DOWNTO 0); -- sfix47_En15
  SIGNAL sum5                             : signed(45 DOWNTO 0); -- sfix46_En15
  SIGNAL add_temp_4                       : signed(46 DOWNTO 0); -- sfix47_En15
  SIGNAL sum6                             : signed(45 DOWNTO 0); -- sfix46_En15
  SIGNAL add_temp_5                       : signed(46 DOWNTO 0); -- sfix47_En15
  SIGNAL output_typeconvert               : signed(45 DOWNTO 0); -- sfix46_En15
  SIGNAL output_register                  : signed(45 DOWNTO 0); -- sfix46_En15


BEGIN

  -- Block Statements
  Delay_Pipeline_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delay_pipeline(0 TO 6) <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        delay_pipeline(0) <= signed(filter_in);
        delay_pipeline(1 TO 6) <= delay_pipeline(0 TO 5);
      END IF;
    END IF; 
  END PROCESS Delay_Pipeline_process;

  mul_temp <= delay_pipeline(6) * coeff7;
  product7 <= mul_temp(44 DOWNTO 0);

  mul_temp_1 <= delay_pipeline(5) * coeff6;
  product6 <= mul_temp_1(44 DOWNTO 0);

  mul_temp_2 <= delay_pipeline(4) * coeff5;
  product5 <= mul_temp_2(44 DOWNTO 0);

  mul_temp_3 <= delay_pipeline(3) * coeff4;
  product4 <= mul_temp_3(44 DOWNTO 0);

  mul_temp_4 <= delay_pipeline(2) * coeff3;
  product3 <= mul_temp_4(44 DOWNTO 0);

  mul_temp_5 <= delay_pipeline(1) * coeff2;
  product2 <= mul_temp_5(44 DOWNTO 0);

  product1_cast <= resize(product1, 46);

  mul_temp_6 <= delay_pipeline(0) * coeff1;
  product1 <= mul_temp_6(44 DOWNTO 0);

  add_temp <= resize(product1_cast, 47) + resize(product2, 47);
  sum1 <= add_temp(45 DOWNTO 0);

  add_temp_1 <= resize(sum1, 47) + resize(product3, 47);
  sum2 <= add_temp_1(45 DOWNTO 0);

  add_temp_2 <= resize(sum2, 47) + resize(product4, 47);
  sum3 <= add_temp_2(45 DOWNTO 0);

  add_temp_3 <= resize(sum3, 47) + resize(product5, 47);
  sum4 <= add_temp_3(45 DOWNTO 0);

  add_temp_4 <= resize(sum4, 47) + resize(product6, 47);
  sum5 <= add_temp_4(45 DOWNTO 0);

  add_temp_5 <= resize(sum5, 47) + resize(product7, 47);
  sum6 <= add_temp_5(45 DOWNTO 0);

  output_typeconvert <= sum6;

  Output_Register_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      output_register <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        output_register <= output_typeconvert;
      END IF;
    END IF; 
  END PROCESS Output_Register_process;

  -- Assignment Statements
  filter_out <= std_logic_vector(output_register);
END rtl;
