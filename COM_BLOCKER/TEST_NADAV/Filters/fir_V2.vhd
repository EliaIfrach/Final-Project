-- -------------------------------------------------------------
--
-- Module: fir_V2
-- Generated by MATLAB(R) 9.10 and Filter Design HDL Coder 3.1.9.
-- Generated on: 2022-08-02 14:42:28
-- -------------------------------------------------------------

-- -------------------------------------------------------------
-- HDL Code Generation Options:
--
-- TargetLanguage: VHDL
-- FIRAdderStyle: tree
-- OptimizeForHDL: on
-- TargetDirectory: C:\Users\Elia Yfrach\Desktop\Project\FM\Filters
-- AddPipelineRegisters: on
-- Name: fir_V2
-- TestBenchName: Hlp_tb
-- TestBenchStimulus: impulse step ramp chirp noise 
-- GenerateHDLTestBench: off

-- Filter Specifications:
--
-- Sample Rate     : 50 MHz
-- Response        : Lowpass
-- Specification   : Fp,Fst,Ap,Ast
-- Passband Ripple : 1 dB
-- Stopband Edge   : 9 MHz
-- Stopband Atten. : 40 dB
-- Passband Edge   : 200 kHz
-- -------------------------------------------------------------

-- -------------------------------------------------------------
-- HDL Implementation    : Fully parallel
-- Folding Factor        : 1
-- -------------------------------------------------------------
-- Filter Settings:
--
-- Discrete-Time FIR Filter (real)
-- -------------------------------
-- Filter Structure  : Direct-Form FIR
-- Filter Length     : 10
-- Stable            : Yes
-- Linear Phase      : Yes (Type 2)
-- Arithmetic        : fixed
-- Numerator         : s16,17 -> [-2.500000e-01 2.500000e-01)
-- Input             : s27,0 -> [-67108864 67108864)
-- Filter Internals  : Specify Precision
--   Output          : s20,0 -> [-524288 524288)
--   Product         : s32,29 -> [-4 4)
--   Accumulator     : s40,29 -> [-1024 1024)
--   Round Mode      : convergent
--   Overflow Mode   : wrap
-- -------------------------------------------------------------



LIBRARY IEEE;
USE IEEE.std_logic_1164.all;
USE IEEE.numeric_std.ALL;

ENTITY fir_V2 IS
   PORT( clk                             :   IN    std_logic; 
         clk_enable                      :   IN    std_logic; 
         reset                           :   IN    std_logic; 
         filter_in                       :   IN    std_logic_vector(26 DOWNTO 0); -- sfix27
         filter_out                      :   OUT   std_logic_vector(19 DOWNTO 0)  -- sfix20
         );

END fir_V2;


----------------------------------------------------------------
--Module Architecture: fir_V2
----------------------------------------------------------------
ARCHITECTURE rtl OF fir_V2 IS
  -- Local Functions
  -- Type Definitions
  TYPE delay_pipeline_type IS ARRAY (NATURAL range <>) OF signed(26 DOWNTO 0); -- sfix27
  -- Constants
  CONSTANT coeff1                         : signed(15 DOWNTO 0) := to_signed(2620, 16); -- sfix16_En17
  CONSTANT coeff2                         : signed(15 DOWNTO 0) := to_signed(6778, 16); -- sfix16_En17
  CONSTANT coeff3                         : signed(15 DOWNTO 0) := to_signed(12617, 16); -- sfix16_En17
  CONSTANT coeff4                         : signed(15 DOWNTO 0) := to_signed(18369, 16); -- sfix16_En17
  CONSTANT coeff5                         : signed(15 DOWNTO 0) := to_signed(21965, 16); -- sfix16_En17
  CONSTANT coeff6                         : signed(15 DOWNTO 0) := to_signed(21965, 16); -- sfix16_En17
  CONSTANT coeff7                         : signed(15 DOWNTO 0) := to_signed(18369, 16); -- sfix16_En17
  CONSTANT coeff8                         : signed(15 DOWNTO 0) := to_signed(12617, 16); -- sfix16_En17
  CONSTANT coeff9                         : signed(15 DOWNTO 0) := to_signed(6778, 16); -- sfix16_En17
  CONSTANT coeff10                        : signed(15 DOWNTO 0) := to_signed(2620, 16); -- sfix16_En17

  -- Signals
  SIGNAL delay_pipeline                   : delay_pipeline_type(0 TO 9); -- sfix27
  SIGNAL product10                        : signed(31 DOWNTO 0); -- sfix32_En29
  SIGNAL mul_temp                         : signed(42 DOWNTO 0); -- sfix43_En17
  SIGNAL product9                         : signed(31 DOWNTO 0); -- sfix32_En29
  SIGNAL mul_temp_1                       : signed(42 DOWNTO 0); -- sfix43_En17
  SIGNAL product8                         : signed(31 DOWNTO 0); -- sfix32_En29
  SIGNAL mul_temp_2                       : signed(42 DOWNTO 0); -- sfix43_En17
  SIGNAL product7                         : signed(31 DOWNTO 0); -- sfix32_En29
  SIGNAL mul_temp_3                       : signed(42 DOWNTO 0); -- sfix43_En17
  SIGNAL product6                         : signed(31 DOWNTO 0); -- sfix32_En29
  SIGNAL mul_temp_4                       : signed(42 DOWNTO 0); -- sfix43_En17
  SIGNAL product5                         : signed(31 DOWNTO 0); -- sfix32_En29
  SIGNAL mul_temp_5                       : signed(42 DOWNTO 0); -- sfix43_En17
  SIGNAL product4                         : signed(31 DOWNTO 0); -- sfix32_En29
  SIGNAL mul_temp_6                       : signed(42 DOWNTO 0); -- sfix43_En17
  SIGNAL product3                         : signed(31 DOWNTO 0); -- sfix32_En29
  SIGNAL mul_temp_7                       : signed(42 DOWNTO 0); -- sfix43_En17
  SIGNAL product2                         : signed(31 DOWNTO 0); -- sfix32_En29
  SIGNAL mul_temp_8                       : signed(42 DOWNTO 0); -- sfix43_En17
  SIGNAL product1                         : signed(31 DOWNTO 0); -- sfix32_En29
  SIGNAL mul_temp_9                       : signed(42 DOWNTO 0); -- sfix43_En17
  SIGNAL sum_final                        : signed(39 DOWNTO 0); -- sfix40_En29
  SIGNAL sum1_1                           : signed(39 DOWNTO 0); -- sfix40_En29
  SIGNAL add_temp                         : signed(32 DOWNTO 0); -- sfix33_En29
  SIGNAL sumpipe1_1                       : signed(39 DOWNTO 0); -- sfix40_En29
  SIGNAL sum1_2                           : signed(39 DOWNTO 0); -- sfix40_En29
  SIGNAL add_temp_1                       : signed(32 DOWNTO 0); -- sfix33_En29
  SIGNAL sumpipe1_2                       : signed(39 DOWNTO 0); -- sfix40_En29
  SIGNAL sum1_3                           : signed(39 DOWNTO 0); -- sfix40_En29
  SIGNAL add_temp_2                       : signed(32 DOWNTO 0); -- sfix33_En29
  SIGNAL sumpipe1_3                       : signed(39 DOWNTO 0); -- sfix40_En29
  SIGNAL sum1_4                           : signed(39 DOWNTO 0); -- sfix40_En29
  SIGNAL add_temp_3                       : signed(32 DOWNTO 0); -- sfix33_En29
  SIGNAL sumpipe1_4                       : signed(39 DOWNTO 0); -- sfix40_En29
  SIGNAL sum1_5                           : signed(39 DOWNTO 0); -- sfix40_En29
  SIGNAL add_temp_4                       : signed(32 DOWNTO 0); -- sfix33_En29
  SIGNAL sumpipe1_5                       : signed(39 DOWNTO 0); -- sfix40_En29
  SIGNAL sum2_1                           : signed(39 DOWNTO 0); -- sfix40_En29
  SIGNAL add_temp_5                       : signed(40 DOWNTO 0); -- sfix41_En29
  SIGNAL sumpipe2_1                       : signed(39 DOWNTO 0); -- sfix40_En29
  SIGNAL sum2_2                           : signed(39 DOWNTO 0); -- sfix40_En29
  SIGNAL add_temp_6                       : signed(40 DOWNTO 0); -- sfix41_En29
  SIGNAL sumpipe2_2                       : signed(39 DOWNTO 0); -- sfix40_En29
  SIGNAL sumpipe2_3                       : signed(39 DOWNTO 0); -- sfix40_En29
  SIGNAL sum3_1                           : signed(39 DOWNTO 0); -- sfix40_En29
  SIGNAL add_temp_7                       : signed(40 DOWNTO 0); -- sfix41_En29
  SIGNAL sumpipe3_1                       : signed(39 DOWNTO 0); -- sfix40_En29
  SIGNAL sumpipe3_2                       : signed(39 DOWNTO 0); -- sfix40_En29
  SIGNAL sum4_1                           : signed(39 DOWNTO 0); -- sfix40_En29
  SIGNAL add_temp_8                       : signed(40 DOWNTO 0); -- sfix41_En29
  SIGNAL sumpipe4_1                       : signed(39 DOWNTO 0); -- sfix40_En29
  SIGNAL output_typeconvert               : signed(19 DOWNTO 0); -- sfix20
  SIGNAL output_register                  : signed(19 DOWNTO 0); -- sfix20


BEGIN

  -- Block Statements
  Delay_Pipeline_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delay_pipeline(0 TO 9) <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        delay_pipeline(0) <= signed(filter_in);
        delay_pipeline(1 TO 9) <= delay_pipeline(0 TO 8);
      END IF;
    END IF; 
  END PROCESS Delay_Pipeline_process;

  mul_temp <= delay_pipeline(9) * coeff10;
  product10 <= resize(mul_temp(19 DOWNTO 0) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 32);

  mul_temp_1 <= delay_pipeline(8) * coeff9;
  product9 <= resize(mul_temp_1(19 DOWNTO 0) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 32);

  mul_temp_2 <= delay_pipeline(7) * coeff8;
  product8 <= resize(mul_temp_2(19 DOWNTO 0) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 32);

  mul_temp_3 <= delay_pipeline(6) * coeff7;
  product7 <= resize(mul_temp_3(19 DOWNTO 0) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 32);

  mul_temp_4 <= delay_pipeline(5) * coeff6;
  product6 <= resize(mul_temp_4(19 DOWNTO 0) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 32);

  mul_temp_5 <= delay_pipeline(4) * coeff5;
  product5 <= resize(mul_temp_5(19 DOWNTO 0) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 32);

  mul_temp_6 <= delay_pipeline(3) * coeff4;
  product4 <= resize(mul_temp_6(19 DOWNTO 0) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 32);

  mul_temp_7 <= delay_pipeline(2) * coeff3;
  product3 <= resize(mul_temp_7(19 DOWNTO 0) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 32);

  mul_temp_8 <= delay_pipeline(1) * coeff2;
  product2 <= resize(mul_temp_8(19 DOWNTO 0) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 32);

  mul_temp_9 <= delay_pipeline(0) * coeff1;
  product1 <= resize(mul_temp_9(19 DOWNTO 0) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 32);

  add_temp <= resize(product10, 33) + resize(product9, 33);
  sum1_1 <= resize(add_temp, 40);

  add_temp_1 <= resize(product8, 33) + resize(product7, 33);
  sum1_2 <= resize(add_temp_1, 40);

  add_temp_2 <= resize(product6, 33) + resize(product5, 33);
  sum1_3 <= resize(add_temp_2, 40);

  add_temp_3 <= resize(product4, 33) + resize(product3, 33);
  sum1_4 <= resize(add_temp_3, 40);

  add_temp_4 <= resize(product2, 33) + resize(product1, 33);
  sum1_5 <= resize(add_temp_4, 40);

  temp_process1 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sumpipe1_1 <= (OTHERS => '0');
      sumpipe1_2 <= (OTHERS => '0');
      sumpipe1_3 <= (OTHERS => '0');
      sumpipe1_4 <= (OTHERS => '0');
      sumpipe1_5 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        sumpipe1_1 <= sum1_1;
        sumpipe1_2 <= sum1_2;
        sumpipe1_3 <= sum1_3;
        sumpipe1_4 <= sum1_4;
        sumpipe1_5 <= sum1_5;
      END IF;
    END IF; 
  END PROCESS temp_process1;

  add_temp_5 <= resize(sumpipe1_1, 41) + resize(sumpipe1_2, 41);
  sum2_1 <= add_temp_5(39 DOWNTO 0);

  add_temp_6 <= resize(sumpipe1_3, 41) + resize(sumpipe1_4, 41);
  sum2_2 <= add_temp_6(39 DOWNTO 0);

  temp_process2 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sumpipe2_1 <= (OTHERS => '0');
      sumpipe2_2 <= (OTHERS => '0');
      sumpipe2_3 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        sumpipe2_1 <= sum2_1;
        sumpipe2_2 <= sum2_2;
        sumpipe2_3 <= sumpipe1_5;
      END IF;
    END IF; 
  END PROCESS temp_process2;

  add_temp_7 <= resize(sumpipe2_1, 41) + resize(sumpipe2_2, 41);
  sum3_1 <= add_temp_7(39 DOWNTO 0);

  temp_process3 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sumpipe3_1 <= (OTHERS => '0');
      sumpipe3_2 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        sumpipe3_1 <= sum3_1;
        sumpipe3_2 <= sumpipe2_3;
      END IF;
    END IF; 
  END PROCESS temp_process3;

  add_temp_8 <= resize(sumpipe3_1, 41) + resize(sumpipe3_2, 41);
  sum4_1 <= add_temp_8(39 DOWNTO 0);

  temp_process4 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sumpipe4_1 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        sumpipe4_1 <= sum4_1;
      END IF;
    END IF; 
  END PROCESS temp_process4;

  sum_final <= sumpipe4_1;

  output_typeconvert <= resize(shift_right(sum_final(39) & sum_final(39 DOWNTO 0) + ( "0" & (sum_final(29) & NOT sum_final(29) & NOT sum_final(29) & NOT sum_final(29) & NOT sum_final(29) & NOT sum_final(29) & NOT sum_final(29) & NOT sum_final(29) & NOT sum_final(29) & NOT sum_final(29) & NOT sum_final(29) & NOT sum_final(29) & NOT sum_final(29) & NOT sum_final(29) & NOT sum_final(29) & NOT sum_final(29) & NOT sum_final(29) & NOT sum_final(29) & NOT sum_final(29) & NOT sum_final(29) & NOT sum_final(29) & NOT sum_final(29) & NOT sum_final(29) & NOT sum_final(29) & NOT sum_final(29) & NOT sum_final(29) & NOT sum_final(29) & NOT sum_final(29) & NOT sum_final(29))), 29), 20);

  Output_Register_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      output_register <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        output_register <= output_typeconvert;
      END IF;
    END IF; 
  END PROCESS Output_Register_process;

  -- Assignment Statements
  filter_out <= std_logic_vector(output_register);
END rtl;
