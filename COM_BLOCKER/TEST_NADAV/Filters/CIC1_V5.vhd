-- -------------------------------------------------------------
--
-- Module: CIC1_V5
-- Generated by MATLAB(R) 9.10 and Filter Design HDL Coder 3.1.9.
-- Generated on: 2022-12-20 18:50:32
-- -------------------------------------------------------------

-- -------------------------------------------------------------
-- HDL Code Generation Options:
--
-- TargetLanguage: VHDL
-- FIRAdderStyle: tree
-- OptimizeForHDL: on
-- TargetDirectory: C:\Users\Elia Yfrach\Desktop\Project\Processing_Unit\Filters
-- AddPipelineRegisters: on
-- Name: CIC1_V5
-- TestBenchName: CIC1_V5_tb
-- TestBenchStimulus: step ramp chirp noise 
-- GenerateHDLTestBench: off

-- Filter Specifications:
--
-- Sample Rate        : 367.647 kHz
-- Response           : CIC Compensator
-- Specification      : Fp,Fst,Ap,Ast
-- Decimation Factor  : 8
-- Multirate Type     : Decimator
-- Stopband Atten.    : 40 dB
-- Differential Delay : 1
-- Number of Sections : 2
-- Passband Ripple    : 1 dB
-- Stopband Edge      : 30 kHz
-- Passband Edge      : 10 kHz
-- -------------------------------------------------------------

-- -------------------------------------------------------------
-- HDL Implementation    : Fully parallel
-- Folding Factor        : 1
-- -------------------------------------------------------------
-- Filter Settings:
--
-- Discrete-Time FIR Multirate Filter (real)
-- -----------------------------------------
-- Filter Structure   : Direct-Form FIR Polyphase Decimator
-- Decimation Factor  : 8
-- Polyphase Length   : 5
-- Filter Length      : 33
-- Stable             : Yes
-- Linear Phase       : Yes (Type 1)
--
-- Arithmetic         : fixed
-- Numerator          : s7,9 -> [-1.250000e-01 1.250000e-01)
-- -------------------------------------------------------------



LIBRARY IEEE;
USE IEEE.std_logic_1164.all;
USE IEEE.numeric_std.ALL;

ENTITY CIC1_V5 IS
   PORT( clk                             :   IN    std_logic; 
         clk_enable                      :   IN    std_logic; 
         reset                           :   IN    std_logic; 
         filter_in                       :   IN    std_logic_vector(6 DOWNTO 0); -- sfix7
         filter_out                      :   OUT   std_logic_vector(16 DOWNTO 0); -- sfix17_En9
         ce_out                          :   OUT   std_logic  
         );

END CIC1_V5;


----------------------------------------------------------------
--Module Architecture: CIC1_V5
----------------------------------------------------------------
ARCHITECTURE rtl OF CIC1_V5 IS
  -- Local Functions
  -- Type Definitions
  TYPE input_pipeline_type IS ARRAY (NATURAL range <>) OF signed(6 DOWNTO 0); -- sfix7
  TYPE sumdelay_pipeline_type IS ARRAY (NATURAL range <>) OF signed(16 DOWNTO 0); -- sfix17_En9
  -- Constants
  CONSTANT coeffphase1_1                  : signed(6 DOWNTO 0) := to_signed(-4, 7); -- sfix7_En9
  CONSTANT coeffphase1_2                  : signed(6 DOWNTO 0) := to_signed(9, 7); -- sfix7_En9
  CONSTANT coeffphase1_3                  : signed(6 DOWNTO 0) := to_signed(53, 7); -- sfix7_En9
  CONSTANT coeffphase1_4                  : signed(6 DOWNTO 0) := to_signed(9, 7); -- sfix7_En9
  CONSTANT coeffphase1_5                  : signed(6 DOWNTO 0) := to_signed(-4, 7); -- sfix7_En9
  CONSTANT coeffphase2_1                  : signed(6 DOWNTO 0) := to_signed(-3, 7); -- sfix7_En9
  CONSTANT coeffphase2_2                  : signed(6 DOWNTO 0) := to_signed(16, 7); -- sfix7_En9
  CONSTANT coeffphase2_3                  : signed(6 DOWNTO 0) := to_signed(52, 7); -- sfix7_En9
  CONSTANT coeffphase2_4                  : signed(6 DOWNTO 0) := to_signed(4, 7); -- sfix7_En9
  CONSTANT coeffphase2_5                  : signed(6 DOWNTO 0) := to_signed(0, 7); -- sfix7_En9
  CONSTANT coeffphase3_1                  : signed(6 DOWNTO 0) := to_signed(-4, 7); -- sfix7_En9
  CONSTANT coeffphase3_2                  : signed(6 DOWNTO 0) := to_signed(23, 7); -- sfix7_En9
  CONSTANT coeffphase3_3                  : signed(6 DOWNTO 0) := to_signed(49, 7); -- sfix7_En9
  CONSTANT coeffphase3_4                  : signed(6 DOWNTO 0) := to_signed(0, 7); -- sfix7_En9
  CONSTANT coeffphase3_5                  : signed(6 DOWNTO 0) := to_signed(0, 7); -- sfix7_En9
  CONSTANT coeffphase4_1                  : signed(6 DOWNTO 0) := to_signed(-4, 7); -- sfix7_En9
  CONSTANT coeffphase4_2                  : signed(6 DOWNTO 0) := to_signed(30, 7); -- sfix7_En9
  CONSTANT coeffphase4_3                  : signed(6 DOWNTO 0) := to_signed(44, 7); -- sfix7_En9
  CONSTANT coeffphase4_4                  : signed(6 DOWNTO 0) := to_signed(-3, 7); -- sfix7_En9
  CONSTANT coeffphase4_5                  : signed(6 DOWNTO 0) := to_signed(0, 7); -- sfix7_En9
  CONSTANT coeffphase5_1                  : signed(6 DOWNTO 0) := to_signed(-4, 7); -- sfix7_En9
  CONSTANT coeffphase5_2                  : signed(6 DOWNTO 0) := to_signed(37, 7); -- sfix7_En9
  CONSTANT coeffphase5_3                  : signed(6 DOWNTO 0) := to_signed(37, 7); -- sfix7_En9
  CONSTANT coeffphase5_4                  : signed(6 DOWNTO 0) := to_signed(-4, 7); -- sfix7_En9
  CONSTANT coeffphase5_5                  : signed(6 DOWNTO 0) := to_signed(0, 7); -- sfix7_En9
  CONSTANT coeffphase6_1                  : signed(6 DOWNTO 0) := to_signed(-3, 7); -- sfix7_En9
  CONSTANT coeffphase6_2                  : signed(6 DOWNTO 0) := to_signed(44, 7); -- sfix7_En9
  CONSTANT coeffphase6_3                  : signed(6 DOWNTO 0) := to_signed(30, 7); -- sfix7_En9
  CONSTANT coeffphase6_4                  : signed(6 DOWNTO 0) := to_signed(-4, 7); -- sfix7_En9
  CONSTANT coeffphase6_5                  : signed(6 DOWNTO 0) := to_signed(0, 7); -- sfix7_En9
  CONSTANT coeffphase7_1                  : signed(6 DOWNTO 0) := to_signed(0, 7); -- sfix7_En9
  CONSTANT coeffphase7_2                  : signed(6 DOWNTO 0) := to_signed(49, 7); -- sfix7_En9
  CONSTANT coeffphase7_3                  : signed(6 DOWNTO 0) := to_signed(23, 7); -- sfix7_En9
  CONSTANT coeffphase7_4                  : signed(6 DOWNTO 0) := to_signed(-4, 7); -- sfix7_En9
  CONSTANT coeffphase7_5                  : signed(6 DOWNTO 0) := to_signed(0, 7); -- sfix7_En9
  CONSTANT coeffphase8_1                  : signed(6 DOWNTO 0) := to_signed(4, 7); -- sfix7_En9
  CONSTANT coeffphase8_2                  : signed(6 DOWNTO 0) := to_signed(52, 7); -- sfix7_En9
  CONSTANT coeffphase8_3                  : signed(6 DOWNTO 0) := to_signed(16, 7); -- sfix7_En9
  CONSTANT coeffphase8_4                  : signed(6 DOWNTO 0) := to_signed(-3, 7); -- sfix7_En9
  CONSTANT coeffphase8_5                  : signed(6 DOWNTO 0) := to_signed(0, 7); -- sfix7_En9

  -- Signals
  SIGNAL ring_count                       : unsigned(7 DOWNTO 0); -- ufix8
  SIGNAL phase_0                          : std_logic; -- boolean
  SIGNAL phase_1                          : std_logic; -- boolean
  SIGNAL phase_2                          : std_logic; -- boolean
  SIGNAL phase_3                          : std_logic; -- boolean
  SIGNAL phase_4                          : std_logic; -- boolean
  SIGNAL phase_5                          : std_logic; -- boolean
  SIGNAL phase_6                          : std_logic; -- boolean
  SIGNAL phase_7                          : std_logic; -- boolean
  SIGNAL ce_out_reg                       : std_logic; -- boolean
  SIGNAL input_register                   : signed(6 DOWNTO 0); -- sfix7
  SIGNAL input_pipeline_phase0            : input_pipeline_type(0 TO 3); -- sfix7
  SIGNAL input_pipeline_phase1            : input_pipeline_type(0 TO 3); -- sfix7
  SIGNAL input_pipeline_phase2            : input_pipeline_type(0 TO 2); -- sfix7
  SIGNAL input_pipeline_phase3            : input_pipeline_type(0 TO 3); -- sfix7
  SIGNAL input_pipeline_phase4            : input_pipeline_type(0 TO 3); -- sfix7
  SIGNAL input_pipeline_phase5            : input_pipeline_type(0 TO 3); -- sfix7
  SIGNAL input_pipeline_phase6            : input_pipeline_type(0 TO 3); -- sfix7
  SIGNAL input_pipeline_phase7            : input_pipeline_type(0 TO 3); -- sfix7
  SIGNAL tapsum1                          : signed(7 DOWNTO 0); -- sfix8
  SIGNAL tapsum2                          : signed(7 DOWNTO 0); -- sfix8
  SIGNAL product_phase0_1                 : signed(13 DOWNTO 0); -- sfix14_En9
  SIGNAL mulpwr2_temp                     : signed(7 DOWNTO 0); -- sfix8
  SIGNAL product_phase0_2                 : signed(13 DOWNTO 0); -- sfix14_En9
  SIGNAL product_phase0_3                 : signed(13 DOWNTO 0); -- sfix14_En9
  SIGNAL product_phase0_4                 : signed(13 DOWNTO 0); -- sfix14_En9
  SIGNAL product_phase0_5                 : signed(13 DOWNTO 0); -- sfix14_En9
  SIGNAL mulpwr2_temp_1                   : signed(7 DOWNTO 0); -- sfix8
  SIGNAL product_phase1_1                 : signed(13 DOWNTO 0); -- sfix14_En9
  SIGNAL product_phase1_2                 : signed(13 DOWNTO 0); -- sfix14_En9
  SIGNAL product_phase1_3                 : signed(13 DOWNTO 0); -- sfix14_En9
  SIGNAL product_phase1_4                 : signed(13 DOWNTO 0); -- sfix14_En9
  SIGNAL product_phase2_1                 : signed(13 DOWNTO 0); -- sfix14_En9
  SIGNAL mulpwr2_temp_2                   : signed(7 DOWNTO 0); -- sfix8
  SIGNAL product_phase2_2                 : signed(13 DOWNTO 0); -- sfix14_En9
  SIGNAL product_phase2_3                 : signed(13 DOWNTO 0); -- sfix14_En9
  SIGNAL product_phase3_1                 : signed(13 DOWNTO 0); -- sfix14_En9
  SIGNAL mulpwr2_temp_3                   : signed(7 DOWNTO 0); -- sfix8
  SIGNAL product_phase3_2                 : signed(13 DOWNTO 0); -- sfix14_En9
  SIGNAL product_phase3_3                 : signed(13 DOWNTO 0); -- sfix14_En9
  SIGNAL product_phase3_4                 : signed(13 DOWNTO 0); -- sfix14_En9
  SIGNAL product_phase4_1                 : signed(13 DOWNTO 0); -- sfix14_En9
  SIGNAL mulpwr2_temp_4                   : signed(7 DOWNTO 0); -- sfix8
  SIGNAL product_phase4_2                 : signed(13 DOWNTO 0); -- sfix14_En9
  SIGNAL product_phase4_3                 : signed(13 DOWNTO 0); -- sfix14_En9
  SIGNAL product_phase4_4                 : signed(13 DOWNTO 0); -- sfix14_En9
  SIGNAL mulpwr2_temp_5                   : signed(7 DOWNTO 0); -- sfix8
  SIGNAL product_phase5_1                 : signed(13 DOWNTO 0); -- sfix14_En9
  SIGNAL product_phase5_2                 : signed(13 DOWNTO 0); -- sfix14_En9
  SIGNAL product_phase5_3                 : signed(13 DOWNTO 0); -- sfix14_En9
  SIGNAL product_phase5_4                 : signed(13 DOWNTO 0); -- sfix14_En9
  SIGNAL mulpwr2_temp_6                   : signed(7 DOWNTO 0); -- sfix8
  SIGNAL product_phase6_2                 : signed(13 DOWNTO 0); -- sfix14_En9
  SIGNAL product_phase6_3                 : signed(13 DOWNTO 0); -- sfix14_En9
  SIGNAL product_phase6_4                 : signed(13 DOWNTO 0); -- sfix14_En9
  SIGNAL mulpwr2_temp_7                   : signed(7 DOWNTO 0); -- sfix8
  SIGNAL product_phase7_1                 : signed(13 DOWNTO 0); -- sfix14_En9
  SIGNAL product_phase7_2                 : signed(13 DOWNTO 0); -- sfix14_En9
  SIGNAL product_phase7_3                 : signed(13 DOWNTO 0); -- sfix14_En9
  SIGNAL product_phase7_4                 : signed(13 DOWNTO 0); -- sfix14_En9
  SIGNAL product_pipeline_phase0_1        : signed(13 DOWNTO 0); -- sfix14_En9
  SIGNAL product_pipeline_phase0_2        : signed(13 DOWNTO 0); -- sfix14_En9
  SIGNAL product_pipeline_phase0_3        : signed(13 DOWNTO 0); -- sfix14_En9
  SIGNAL product_pipeline_phase0_4        : signed(13 DOWNTO 0); -- sfix14_En9
  SIGNAL product_pipeline_phase0_5        : signed(13 DOWNTO 0); -- sfix14_En9
  SIGNAL product_pipeline_phase1_1        : signed(13 DOWNTO 0); -- sfix14_En9
  SIGNAL product_pipeline_phase1_2        : signed(13 DOWNTO 0); -- sfix14_En9
  SIGNAL product_pipeline_phase1_3        : signed(13 DOWNTO 0); -- sfix14_En9
  SIGNAL product_pipeline_phase1_4        : signed(13 DOWNTO 0); -- sfix14_En9
  SIGNAL product_pipeline_phase2_1        : signed(13 DOWNTO 0); -- sfix14_En9
  SIGNAL product_pipeline_phase2_2        : signed(13 DOWNTO 0); -- sfix14_En9
  SIGNAL product_pipeline_phase2_3        : signed(13 DOWNTO 0); -- sfix14_En9
  SIGNAL product_pipeline_phase3_1        : signed(13 DOWNTO 0); -- sfix14_En9
  SIGNAL product_pipeline_phase3_2        : signed(13 DOWNTO 0); -- sfix14_En9
  SIGNAL product_pipeline_phase3_3        : signed(13 DOWNTO 0); -- sfix14_En9
  SIGNAL product_pipeline_phase3_4        : signed(13 DOWNTO 0); -- sfix14_En9
  SIGNAL product_pipeline_phase4_1        : signed(13 DOWNTO 0); -- sfix14_En9
  SIGNAL product_pipeline_phase4_2        : signed(13 DOWNTO 0); -- sfix14_En9
  SIGNAL product_pipeline_phase4_3        : signed(13 DOWNTO 0); -- sfix14_En9
  SIGNAL product_pipeline_phase4_4        : signed(13 DOWNTO 0); -- sfix14_En9
  SIGNAL product_pipeline_phase5_1        : signed(13 DOWNTO 0); -- sfix14_En9
  SIGNAL product_pipeline_phase5_2        : signed(13 DOWNTO 0); -- sfix14_En9
  SIGNAL product_pipeline_phase5_3        : signed(13 DOWNTO 0); -- sfix14_En9
  SIGNAL product_pipeline_phase5_4        : signed(13 DOWNTO 0); -- sfix14_En9
  SIGNAL product_pipeline_phase6_2        : signed(13 DOWNTO 0); -- sfix14_En9
  SIGNAL product_pipeline_phase6_3        : signed(13 DOWNTO 0); -- sfix14_En9
  SIGNAL product_pipeline_phase6_4        : signed(13 DOWNTO 0); -- sfix14_En9
  SIGNAL product_pipeline_phase7_1        : signed(13 DOWNTO 0); -- sfix14_En9
  SIGNAL product_pipeline_phase7_2        : signed(13 DOWNTO 0); -- sfix14_En9
  SIGNAL product_pipeline_phase7_3        : signed(13 DOWNTO 0); -- sfix14_En9
  SIGNAL product_pipeline_phase7_4        : signed(13 DOWNTO 0); -- sfix14_En9
  SIGNAL sumvector1                       : sumdelay_pipeline_type(0 TO 15); -- sfix17_En9
  SIGNAL add_temp                         : signed(14 DOWNTO 0); -- sfix15_En9
  SIGNAL add_temp_1                       : signed(14 DOWNTO 0); -- sfix15_En9
  SIGNAL add_temp_2                       : signed(14 DOWNTO 0); -- sfix15_En9
  SIGNAL add_temp_3                       : signed(14 DOWNTO 0); -- sfix15_En9
  SIGNAL add_temp_4                       : signed(14 DOWNTO 0); -- sfix15_En9
  SIGNAL add_temp_5                       : signed(14 DOWNTO 0); -- sfix15_En9
  SIGNAL add_temp_6                       : signed(14 DOWNTO 0); -- sfix15_En9
  SIGNAL add_temp_7                       : signed(14 DOWNTO 0); -- sfix15_En9
  SIGNAL add_temp_8                       : signed(14 DOWNTO 0); -- sfix15_En9
  SIGNAL add_temp_9                       : signed(14 DOWNTO 0); -- sfix15_En9
  SIGNAL add_temp_10                      : signed(14 DOWNTO 0); -- sfix15_En9
  SIGNAL add_temp_11                      : signed(14 DOWNTO 0); -- sfix15_En9
  SIGNAL add_temp_12                      : signed(14 DOWNTO 0); -- sfix15_En9
  SIGNAL add_temp_13                      : signed(14 DOWNTO 0); -- sfix15_En9
  SIGNAL add_temp_14                      : signed(14 DOWNTO 0); -- sfix15_En9
  SIGNAL sumdelay_pipeline1               : sumdelay_pipeline_type(0 TO 15); -- sfix17_En9
  SIGNAL sumvector2                       : sumdelay_pipeline_type(0 TO 7); -- sfix17_En9
  SIGNAL add_temp_15                      : signed(17 DOWNTO 0); -- sfix18_En9
  SIGNAL add_temp_16                      : signed(17 DOWNTO 0); -- sfix18_En9
  SIGNAL add_temp_17                      : signed(17 DOWNTO 0); -- sfix18_En9
  SIGNAL add_temp_18                      : signed(17 DOWNTO 0); -- sfix18_En9
  SIGNAL add_temp_19                      : signed(17 DOWNTO 0); -- sfix18_En9
  SIGNAL add_temp_20                      : signed(17 DOWNTO 0); -- sfix18_En9
  SIGNAL add_temp_21                      : signed(17 DOWNTO 0); -- sfix18_En9
  SIGNAL add_temp_22                      : signed(17 DOWNTO 0); -- sfix18_En9
  SIGNAL sumdelay_pipeline2               : sumdelay_pipeline_type(0 TO 7); -- sfix17_En9
  SIGNAL sumvector3                       : sumdelay_pipeline_type(0 TO 3); -- sfix17_En9
  SIGNAL add_temp_23                      : signed(17 DOWNTO 0); -- sfix18_En9
  SIGNAL add_temp_24                      : signed(17 DOWNTO 0); -- sfix18_En9
  SIGNAL add_temp_25                      : signed(17 DOWNTO 0); -- sfix18_En9
  SIGNAL add_temp_26                      : signed(17 DOWNTO 0); -- sfix18_En9
  SIGNAL sumdelay_pipeline3               : sumdelay_pipeline_type(0 TO 3); -- sfix17_En9
  SIGNAL sumvector4                       : sumdelay_pipeline_type(0 TO 1); -- sfix17_En9
  SIGNAL add_temp_27                      : signed(17 DOWNTO 0); -- sfix18_En9
  SIGNAL add_temp_28                      : signed(17 DOWNTO 0); -- sfix18_En9
  SIGNAL sumdelay_pipeline4               : sumdelay_pipeline_type(0 TO 1); -- sfix17_En9
  SIGNAL sum5                             : signed(16 DOWNTO 0); -- sfix17_En9
  SIGNAL add_temp_29                      : signed(17 DOWNTO 0); -- sfix18_En9
  SIGNAL output_typeconvert               : signed(16 DOWNTO 0); -- sfix17_En9
  SIGNAL ce_delayline1                    : std_logic; -- boolean
  SIGNAL ce_delayline2                    : std_logic; -- boolean
  SIGNAL ce_delayline3                    : std_logic; -- boolean
  SIGNAL ce_delayline4                    : std_logic; -- boolean
  SIGNAL ce_delayline5                    : std_logic; -- boolean
  SIGNAL ce_delayline6                    : std_logic; -- boolean
  SIGNAL ce_delayline7                    : std_logic; -- boolean
  SIGNAL ce_delayline8                    : std_logic; -- boolean
  SIGNAL ce_delayline9                    : std_logic; -- boolean
  SIGNAL ce_delayline10                   : std_logic; -- boolean
  SIGNAL ce_delayline11                   : std_logic; -- boolean
  SIGNAL ce_delayline12                   : std_logic; -- boolean
  SIGNAL ce_delayline13                   : std_logic; -- boolean
  SIGNAL ce_delayline14                   : std_logic; -- boolean
  SIGNAL ce_delayline15                   : std_logic; -- boolean
  SIGNAL ce_delayline16                   : std_logic; -- boolean
  SIGNAL ce_delayline17                   : std_logic; -- boolean
  SIGNAL ce_delayline18                   : std_logic; -- boolean
  SIGNAL ce_delayline19                   : std_logic; -- boolean
  SIGNAL ce_delayline20                   : std_logic; -- boolean
  SIGNAL ce_delayline21                   : std_logic; -- boolean
  SIGNAL ce_delayline22                   : std_logic; -- boolean
  SIGNAL ce_delayline23                   : std_logic; -- boolean
  SIGNAL ce_delayline24                   : std_logic; -- boolean
  SIGNAL ce_delayline25                   : std_logic; -- boolean
  SIGNAL ce_delayline26                   : std_logic; -- boolean
  SIGNAL ce_delayline27                   : std_logic; -- boolean
  SIGNAL ce_delayline28                   : std_logic; -- boolean
  SIGNAL ce_delayline29                   : std_logic; -- boolean
  SIGNAL ce_delayline30                   : std_logic; -- boolean
  SIGNAL ce_delayline31                   : std_logic; -- boolean
  SIGNAL ce_delayline32                   : std_logic; -- boolean
  SIGNAL ce_delayline33                   : std_logic; -- boolean
  SIGNAL ce_delayline34                   : std_logic; -- boolean
  SIGNAL ce_delayline35                   : std_logic; -- boolean
  SIGNAL ce_delayline36                   : std_logic; -- boolean
  SIGNAL ce_delayline37                   : std_logic; -- boolean
  SIGNAL ce_delayline38                   : std_logic; -- boolean
  SIGNAL ce_delayline39                   : std_logic; -- boolean
  SIGNAL ce_delayline40                   : std_logic; -- boolean
  SIGNAL ce_delayline41                   : std_logic; -- boolean
  SIGNAL ce_delayline42                   : std_logic; -- boolean
  SIGNAL ce_gated                         : std_logic; -- boolean
  SIGNAL output_register                  : signed(16 DOWNTO 0); -- sfix17_En9


BEGIN

  -- Block Statements
  ce_output : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      ring_count <= to_unsigned(1, 8);
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        ring_count <= ring_count(0) & ring_count(7 DOWNTO 1);
      END IF;
    END IF; 
  END PROCESS ce_output;

  phase_0 <= ring_count(0)  AND clk_enable;

  phase_1 <= ring_count(1)  AND clk_enable;

  phase_2 <= ring_count(2)  AND clk_enable;

  phase_3 <= ring_count(3)  AND clk_enable;

  phase_4 <= ring_count(4)  AND clk_enable;

  phase_5 <= ring_count(5)  AND clk_enable;

  phase_6 <= ring_count(6)  AND clk_enable;

  phase_7 <= ring_count(7)  AND clk_enable;

  --   ------------------ CE Output Register ------------------

  ce_output_register : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      ce_out_reg <= '0';
    ELSIF clk'event AND clk = '1' THEN
      ce_out_reg <= phase_7;
      
    END IF; 
  END PROCESS ce_output_register;

  input_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      input_register <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        input_register <= signed(filter_in);
      END IF;
    END IF; 
  END PROCESS input_reg_process;

  Delay_Pipeline_Phase0_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      input_pipeline_phase0(0 TO 3) <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF phase_7 = '1' THEN
        input_pipeline_phase0(0) <= input_register;
        input_pipeline_phase0(1 TO 3) <= input_pipeline_phase0(0 TO 2);
      END IF;
    END IF; 
  END PROCESS Delay_Pipeline_Phase0_process;

  Delay_Pipeline_Phase1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      input_pipeline_phase1(0 TO 3) <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF phase_0 = '1' THEN
        input_pipeline_phase1(0) <= input_register;
        input_pipeline_phase1(1 TO 3) <= input_pipeline_phase1(0 TO 2);
      END IF;
    END IF; 
  END PROCESS Delay_Pipeline_Phase1_process;

  Delay_Pipeline_Phase2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      input_pipeline_phase2(0 TO 2) <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF phase_1 = '1' THEN
        input_pipeline_phase2(0) <= input_register;
        input_pipeline_phase2(1 TO 2) <= input_pipeline_phase2(0 TO 1);
      END IF;
    END IF; 
  END PROCESS Delay_Pipeline_Phase2_process;

  Delay_Pipeline_Phase3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      input_pipeline_phase3(0 TO 3) <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF phase_2 = '1' THEN
        input_pipeline_phase3(0) <= input_register;
        input_pipeline_phase3(1 TO 3) <= input_pipeline_phase3(0 TO 2);
      END IF;
    END IF; 
  END PROCESS Delay_Pipeline_Phase3_process;

  Delay_Pipeline_Phase4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      input_pipeline_phase4(0 TO 3) <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF phase_3 = '1' THEN
        input_pipeline_phase4(0) <= input_register;
        input_pipeline_phase4(1 TO 3) <= input_pipeline_phase4(0 TO 2);
      END IF;
    END IF; 
  END PROCESS Delay_Pipeline_Phase4_process;

  Delay_Pipeline_Phase5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      input_pipeline_phase5(0 TO 3) <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF phase_4 = '1' THEN
        input_pipeline_phase5(0) <= input_register;
        input_pipeline_phase5(1 TO 3) <= input_pipeline_phase5(0 TO 2);
      END IF;
    END IF; 
  END PROCESS Delay_Pipeline_Phase5_process;

  Delay_Pipeline_Phase6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      input_pipeline_phase6(0 TO 3) <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF phase_5 = '1' THEN
        input_pipeline_phase6(0) <= input_register;
        input_pipeline_phase6(1 TO 3) <= input_pipeline_phase6(0 TO 2);
      END IF;
    END IF; 
  END PROCESS Delay_Pipeline_Phase6_process;

  Delay_Pipeline_Phase7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      input_pipeline_phase7(0 TO 3) <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF phase_6 = '1' THEN
        input_pipeline_phase7(0) <= input_register;
        input_pipeline_phase7(1 TO 3) <= input_pipeline_phase7(0 TO 2);
      END IF;
    END IF; 
  END PROCESS Delay_Pipeline_Phase7_process;

  tapsum1 <= resize(input_register, 8) + resize(input_pipeline_phase0(3), 8);

  tapsum2 <= resize(input_pipeline_phase0(0), 8) + resize(input_pipeline_phase0(2), 8);

  mulpwr2_temp <= ('0' & input_register) WHEN input_register = "1000000"
      ELSE -resize(input_register,8);

  product_phase0_1 <= resize(mulpwr2_temp(7 DOWNTO 0) & '0' & '0', 14);

  product_phase0_2 <= input_pipeline_phase0(0) * coeffphase1_2;

  product_phase0_3 <= input_pipeline_phase0(1) * coeffphase1_3;

  product_phase0_4 <= input_pipeline_phase0(2) * coeffphase1_4;

  mulpwr2_temp_1 <= ('0' & input_pipeline_phase0(3)) WHEN input_pipeline_phase0(3) = "1000000"
      ELSE -resize(input_pipeline_phase0(3),8);

  product_phase0_5 <= resize(mulpwr2_temp_1(7 DOWNTO 0) & '0' & '0', 14);

  product_phase1_1 <= input_pipeline_phase1(0) * coeffphase2_1;

  product_phase1_2 <= resize(input_pipeline_phase1(1)(6 DOWNTO 0) & '0' & '0' & '0' & '0', 14);

  product_phase1_3 <= input_pipeline_phase1(2) * coeffphase2_3;

  product_phase1_4 <= resize(input_pipeline_phase1(3)(6 DOWNTO 0) & '0' & '0', 14);

  mulpwr2_temp_2 <= ('0' & input_pipeline_phase2(0)) WHEN input_pipeline_phase2(0) = "1000000"
      ELSE -resize(input_pipeline_phase2(0),8);

  product_phase2_1 <= resize(mulpwr2_temp_2(7 DOWNTO 0) & '0' & '0', 14);

  product_phase2_2 <= input_pipeline_phase2(1) * coeffphase3_2;

  product_phase2_3 <= input_pipeline_phase2(2) * coeffphase3_3;

  mulpwr2_temp_3 <= ('0' & input_pipeline_phase3(0)) WHEN input_pipeline_phase3(0) = "1000000"
      ELSE -resize(input_pipeline_phase3(0),8);

  product_phase3_1 <= resize(mulpwr2_temp_3(7 DOWNTO 0) & '0' & '0', 14);

  product_phase3_2 <= input_pipeline_phase3(1) * coeffphase4_2;

  product_phase3_3 <= input_pipeline_phase3(2) * coeffphase4_3;

  product_phase3_4 <= input_pipeline_phase3(3) * coeffphase4_4;

  mulpwr2_temp_4 <= ('0' & input_pipeline_phase4(0)) WHEN input_pipeline_phase4(0) = "1000000"
      ELSE -resize(input_pipeline_phase4(0),8);

  product_phase4_1 <= resize(mulpwr2_temp_4(7 DOWNTO 0) & '0' & '0', 14);

  product_phase4_2 <= input_pipeline_phase4(1) * coeffphase5_2;

  product_phase4_3 <= input_pipeline_phase4(2) * coeffphase5_3;

  mulpwr2_temp_5 <= ('0' & input_pipeline_phase4(3)) WHEN input_pipeline_phase4(3) = "1000000"
      ELSE -resize(input_pipeline_phase4(3),8);

  product_phase4_4 <= resize(mulpwr2_temp_5(7 DOWNTO 0) & '0' & '0', 14);

  product_phase5_1 <= input_pipeline_phase5(0) * coeffphase6_1;

  product_phase5_2 <= input_pipeline_phase5(1) * coeffphase6_2;

  product_phase5_3 <= input_pipeline_phase5(2) * coeffphase6_3;

  mulpwr2_temp_6 <= ('0' & input_pipeline_phase5(3)) WHEN input_pipeline_phase5(3) = "1000000"
      ELSE -resize(input_pipeline_phase5(3),8);

  product_phase5_4 <= resize(mulpwr2_temp_6(7 DOWNTO 0) & '0' & '0', 14);

  product_phase6_2 <= input_pipeline_phase6(1) * coeffphase7_2;

  product_phase6_3 <= input_pipeline_phase6(2) * coeffphase7_3;

  mulpwr2_temp_7 <= ('0' & input_pipeline_phase6(3)) WHEN input_pipeline_phase6(3) = "1000000"
      ELSE -resize(input_pipeline_phase6(3),8);

  product_phase6_4 <= resize(mulpwr2_temp_7(7 DOWNTO 0) & '0' & '0', 14);

  product_phase7_1 <= resize(input_pipeline_phase7(0)(6 DOWNTO 0) & '0' & '0', 14);

  product_phase7_2 <= input_pipeline_phase7(1) * coeffphase8_2;

  product_phase7_3 <= resize(input_pipeline_phase7(2)(6 DOWNTO 0) & '0' & '0' & '0' & '0', 14);

  product_phase7_4 <= input_pipeline_phase7(3) * coeffphase8_4;

  product_pipeline_process7 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      product_pipeline_phase0_1 <= (OTHERS => '0');
      product_pipeline_phase1_1 <= (OTHERS => '0');
      product_pipeline_phase2_1 <= (OTHERS => '0');
      product_pipeline_phase3_1 <= (OTHERS => '0');
      product_pipeline_phase4_1 <= (OTHERS => '0');
      product_pipeline_phase5_1 <= (OTHERS => '0');
      product_pipeline_phase7_1 <= (OTHERS => '0');
      product_pipeline_phase0_2 <= (OTHERS => '0');
      product_pipeline_phase1_2 <= (OTHERS => '0');
      product_pipeline_phase2_2 <= (OTHERS => '0');
      product_pipeline_phase3_2 <= (OTHERS => '0');
      product_pipeline_phase4_2 <= (OTHERS => '0');
      product_pipeline_phase5_2 <= (OTHERS => '0');
      product_pipeline_phase6_2 <= (OTHERS => '0');
      product_pipeline_phase7_2 <= (OTHERS => '0');
      product_pipeline_phase0_3 <= (OTHERS => '0');
      product_pipeline_phase1_3 <= (OTHERS => '0');
      product_pipeline_phase2_3 <= (OTHERS => '0');
      product_pipeline_phase3_3 <= (OTHERS => '0');
      product_pipeline_phase4_3 <= (OTHERS => '0');
      product_pipeline_phase5_3 <= (OTHERS => '0');
      product_pipeline_phase6_3 <= (OTHERS => '0');
      product_pipeline_phase7_3 <= (OTHERS => '0');
      product_pipeline_phase0_4 <= (OTHERS => '0');
      product_pipeline_phase1_4 <= (OTHERS => '0');
      product_pipeline_phase3_4 <= (OTHERS => '0');
      product_pipeline_phase4_4 <= (OTHERS => '0');
      product_pipeline_phase5_4 <= (OTHERS => '0');
      product_pipeline_phase6_4 <= (OTHERS => '0');
      product_pipeline_phase7_4 <= (OTHERS => '0');
      product_pipeline_phase0_5 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_7 = '1' THEN
        product_pipeline_phase0_1 <= product_phase0_1;
        product_pipeline_phase1_1 <= product_phase1_1;
        product_pipeline_phase2_1 <= product_phase2_1;
        product_pipeline_phase3_1 <= product_phase3_1;
        product_pipeline_phase4_1 <= product_phase4_1;
        product_pipeline_phase5_1 <= product_phase5_1;
        product_pipeline_phase7_1 <= product_phase7_1;
        product_pipeline_phase0_2 <= product_phase0_2;
        product_pipeline_phase1_2 <= product_phase1_2;
        product_pipeline_phase2_2 <= product_phase2_2;
        product_pipeline_phase3_2 <= product_phase3_2;
        product_pipeline_phase4_2 <= product_phase4_2;
        product_pipeline_phase5_2 <= product_phase5_2;
        product_pipeline_phase6_2 <= product_phase6_2;
        product_pipeline_phase7_2 <= product_phase7_2;
        product_pipeline_phase0_3 <= product_phase0_3;
        product_pipeline_phase1_3 <= product_phase1_3;
        product_pipeline_phase2_3 <= product_phase2_3;
        product_pipeline_phase3_3 <= product_phase3_3;
        product_pipeline_phase4_3 <= product_phase4_3;
        product_pipeline_phase5_3 <= product_phase5_3;
        product_pipeline_phase6_3 <= product_phase6_3;
        product_pipeline_phase7_3 <= product_phase7_3;
        product_pipeline_phase0_4 <= product_phase0_4;
        product_pipeline_phase1_4 <= product_phase1_4;
        product_pipeline_phase3_4 <= product_phase3_4;
        product_pipeline_phase4_4 <= product_phase4_4;
        product_pipeline_phase5_4 <= product_phase5_4;
        product_pipeline_phase6_4 <= product_phase6_4;
        product_pipeline_phase7_4 <= product_phase7_4;
        product_pipeline_phase0_5 <= product_phase0_5;
      END IF;
    END IF; 
  END PROCESS product_pipeline_process7;

  add_temp <= resize(product_pipeline_phase7_1, 15) + resize(product_pipeline_phase7_2, 15);
  sumvector1(0) <= resize(add_temp, 17);

  add_temp_1 <= resize(product_pipeline_phase7_3, 15) + resize(product_pipeline_phase7_4, 15);
  sumvector1(1) <= resize(add_temp_1, 17);

  add_temp_2 <= resize(product_pipeline_phase6_2, 15) + resize(product_pipeline_phase6_3, 15);
  sumvector1(2) <= resize(add_temp_2, 17);

  add_temp_3 <= resize(product_pipeline_phase6_4, 15) + resize(product_pipeline_phase5_1, 15);
  sumvector1(3) <= resize(add_temp_3, 17);

  add_temp_4 <= resize(product_pipeline_phase5_2, 15) + resize(product_pipeline_phase5_3, 15);
  sumvector1(4) <= resize(add_temp_4, 17);

  add_temp_5 <= resize(product_pipeline_phase5_4, 15) + resize(product_pipeline_phase4_1, 15);
  sumvector1(5) <= resize(add_temp_5, 17);

  add_temp_6 <= resize(product_pipeline_phase4_2, 15) + resize(product_pipeline_phase4_3, 15);
  sumvector1(6) <= resize(add_temp_6, 17);

  add_temp_7 <= resize(product_pipeline_phase4_4, 15) + resize(product_pipeline_phase3_1, 15);
  sumvector1(7) <= resize(add_temp_7, 17);

  add_temp_8 <= resize(product_pipeline_phase3_2, 15) + resize(product_pipeline_phase3_3, 15);
  sumvector1(8) <= resize(add_temp_8, 17);

  add_temp_9 <= resize(product_pipeline_phase3_4, 15) + resize(product_pipeline_phase2_1, 15);
  sumvector1(9) <= resize(add_temp_9, 17);

  add_temp_10 <= resize(product_pipeline_phase2_2, 15) + resize(product_pipeline_phase2_3, 15);
  sumvector1(10) <= resize(add_temp_10, 17);

  add_temp_11 <= resize(product_pipeline_phase1_1, 15) + resize(product_pipeline_phase1_2, 15);
  sumvector1(11) <= resize(add_temp_11, 17);

  add_temp_12 <= resize(product_pipeline_phase1_3, 15) + resize(product_pipeline_phase1_4, 15);
  sumvector1(12) <= resize(add_temp_12, 17);

  add_temp_13 <= resize(product_pipeline_phase0_1, 15) + resize(product_pipeline_phase0_2, 15);
  sumvector1(13) <= resize(add_temp_13, 17);

  add_temp_14 <= resize(product_pipeline_phase0_3, 15) + resize(product_pipeline_phase0_4, 15);
  sumvector1(14) <= resize(add_temp_14, 17);

  sumvector1(15) <= resize(product_pipeline_phase0_5, 17);

  sumdelay_pipeline_process1 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sumdelay_pipeline1 <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF phase_7 = '1' THEN
        sumdelay_pipeline1(0 TO 15) <= sumvector1(0 TO 15);
      END IF;
    END IF; 
  END PROCESS sumdelay_pipeline_process1;

  add_temp_15 <= resize(sumdelay_pipeline1(0), 18) + resize(sumdelay_pipeline1(1), 18);
  sumvector2(0) <= add_temp_15(16 DOWNTO 0);

  add_temp_16 <= resize(sumdelay_pipeline1(2), 18) + resize(sumdelay_pipeline1(3), 18);
  sumvector2(1) <= add_temp_16(16 DOWNTO 0);

  add_temp_17 <= resize(sumdelay_pipeline1(4), 18) + resize(sumdelay_pipeline1(5), 18);
  sumvector2(2) <= add_temp_17(16 DOWNTO 0);

  add_temp_18 <= resize(sumdelay_pipeline1(6), 18) + resize(sumdelay_pipeline1(7), 18);
  sumvector2(3) <= add_temp_18(16 DOWNTO 0);

  add_temp_19 <= resize(sumdelay_pipeline1(8), 18) + resize(sumdelay_pipeline1(9), 18);
  sumvector2(4) <= add_temp_19(16 DOWNTO 0);

  add_temp_20 <= resize(sumdelay_pipeline1(10), 18) + resize(sumdelay_pipeline1(11), 18);
  sumvector2(5) <= add_temp_20(16 DOWNTO 0);

  add_temp_21 <= resize(sumdelay_pipeline1(12), 18) + resize(sumdelay_pipeline1(13), 18);
  sumvector2(6) <= add_temp_21(16 DOWNTO 0);

  add_temp_22 <= resize(sumdelay_pipeline1(14), 18) + resize(sumdelay_pipeline1(15), 18);
  sumvector2(7) <= add_temp_22(16 DOWNTO 0);

  sumdelay_pipeline_process2 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sumdelay_pipeline2 <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF phase_7 = '1' THEN
        sumdelay_pipeline2(0 TO 7) <= sumvector2(0 TO 7);
      END IF;
    END IF; 
  END PROCESS sumdelay_pipeline_process2;

  add_temp_23 <= resize(sumdelay_pipeline2(0), 18) + resize(sumdelay_pipeline2(1), 18);
  sumvector3(0) <= add_temp_23(16 DOWNTO 0);

  add_temp_24 <= resize(sumdelay_pipeline2(2), 18) + resize(sumdelay_pipeline2(3), 18);
  sumvector3(1) <= add_temp_24(16 DOWNTO 0);

  add_temp_25 <= resize(sumdelay_pipeline2(4), 18) + resize(sumdelay_pipeline2(5), 18);
  sumvector3(2) <= add_temp_25(16 DOWNTO 0);

  add_temp_26 <= resize(sumdelay_pipeline2(6), 18) + resize(sumdelay_pipeline2(7), 18);
  sumvector3(3) <= add_temp_26(16 DOWNTO 0);

  sumdelay_pipeline_process3 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sumdelay_pipeline3 <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF phase_7 = '1' THEN
        sumdelay_pipeline3(0 TO 3) <= sumvector3(0 TO 3);
      END IF;
    END IF; 
  END PROCESS sumdelay_pipeline_process3;

  add_temp_27 <= resize(sumdelay_pipeline3(0), 18) + resize(sumdelay_pipeline3(1), 18);
  sumvector4(0) <= add_temp_27(16 DOWNTO 0);

  add_temp_28 <= resize(sumdelay_pipeline3(2), 18) + resize(sumdelay_pipeline3(3), 18);
  sumvector4(1) <= add_temp_28(16 DOWNTO 0);

  sumdelay_pipeline_process4 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sumdelay_pipeline4 <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF phase_7 = '1' THEN
        sumdelay_pipeline4(0 TO 1) <= sumvector4(0 TO 1);
      END IF;
    END IF; 
  END PROCESS sumdelay_pipeline_process4;

  add_temp_29 <= resize(sumdelay_pipeline4(0), 18) + resize(sumdelay_pipeline4(1), 18);
  sum5 <= add_temp_29(16 DOWNTO 0);

  output_typeconvert <= sum5;

  ce_delay : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      ce_delayline1 <= '0';
      ce_delayline2 <= '0';
      ce_delayline3 <= '0';
      ce_delayline4 <= '0';
      ce_delayline5 <= '0';
      ce_delayline6 <= '0';
      ce_delayline7 <= '0';
      ce_delayline8 <= '0';
      ce_delayline9 <= '0';
      ce_delayline10 <= '0';
      ce_delayline11 <= '0';
      ce_delayline12 <= '0';
      ce_delayline13 <= '0';
      ce_delayline14 <= '0';
      ce_delayline15 <= '0';
      ce_delayline16 <= '0';
      ce_delayline17 <= '0';
      ce_delayline18 <= '0';
      ce_delayline19 <= '0';
      ce_delayline20 <= '0';
      ce_delayline21 <= '0';
      ce_delayline22 <= '0';
      ce_delayline23 <= '0';
      ce_delayline24 <= '0';
      ce_delayline25 <= '0';
      ce_delayline26 <= '0';
      ce_delayline27 <= '0';
      ce_delayline28 <= '0';
      ce_delayline29 <= '0';
      ce_delayline30 <= '0';
      ce_delayline31 <= '0';
      ce_delayline32 <= '0';
      ce_delayline33 <= '0';
      ce_delayline34 <= '0';
      ce_delayline35 <= '0';
      ce_delayline36 <= '0';
      ce_delayline37 <= '0';
      ce_delayline38 <= '0';
      ce_delayline39 <= '0';
      ce_delayline40 <= '0';
      ce_delayline41 <= '0';
      ce_delayline42 <= '0';
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        ce_delayline1 <= clk_enable;
        ce_delayline2 <= ce_delayline1;
        ce_delayline3 <= ce_delayline2;
        ce_delayline4 <= ce_delayline3;
        ce_delayline5 <= ce_delayline4;
        ce_delayline6 <= ce_delayline5;
        ce_delayline7 <= ce_delayline6;
        ce_delayline8 <= ce_delayline7;
        ce_delayline9 <= ce_delayline8;
        ce_delayline10 <= ce_delayline9;
        ce_delayline11 <= ce_delayline10;
        ce_delayline12 <= ce_delayline11;
        ce_delayline13 <= ce_delayline12;
        ce_delayline14 <= ce_delayline13;
        ce_delayline15 <= ce_delayline14;
        ce_delayline16 <= ce_delayline15;
        ce_delayline17 <= ce_delayline16;
        ce_delayline18 <= ce_delayline17;
        ce_delayline19 <= ce_delayline18;
        ce_delayline20 <= ce_delayline19;
        ce_delayline21 <= ce_delayline20;
        ce_delayline22 <= ce_delayline21;
        ce_delayline23 <= ce_delayline22;
        ce_delayline24 <= ce_delayline23;
        ce_delayline25 <= ce_delayline24;
        ce_delayline26 <= ce_delayline25;
        ce_delayline27 <= ce_delayline26;
        ce_delayline28 <= ce_delayline27;
        ce_delayline29 <= ce_delayline28;
        ce_delayline30 <= ce_delayline29;
        ce_delayline31 <= ce_delayline30;
        ce_delayline32 <= ce_delayline31;
        ce_delayline33 <= ce_delayline32;
        ce_delayline34 <= ce_delayline33;
        ce_delayline35 <= ce_delayline34;
        ce_delayline36 <= ce_delayline35;
        ce_delayline37 <= ce_delayline36;
        ce_delayline38 <= ce_delayline37;
        ce_delayline39 <= ce_delayline38;
        ce_delayline40 <= ce_delayline39;
        ce_delayline41 <= ce_delayline40;
        ce_delayline42 <= ce_delayline41;
      END IF;
    END IF; 
  END PROCESS ce_delay;

  ce_gated <=  ce_delayline42 AND ce_out_reg;

  output_register_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      output_register <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_7 = '1' THEN
        output_register <= output_typeconvert;
      END IF;
    END IF; 
  END PROCESS output_register_process;

  -- Assignment Statements
  ce_out <= ce_gated;
  filter_out <= std_logic_vector(output_register);
END rtl;
