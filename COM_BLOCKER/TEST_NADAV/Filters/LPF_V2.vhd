-- -------------------------------------------------------------
--
-- Module: LPF_V2
-- Generated by MATLAB(R) 9.10 and Filter Design HDL Coder 3.1.9.
-- Generated on: 2022-09-07 13:55:13
-- -------------------------------------------------------------

-- -------------------------------------------------------------
-- HDL Code Generation Options:
--
-- TargetLanguage: VHDL
-- TargetDirectory: C:\Users\Elia Yfrach\Desktop\Project\Processing_Unit\Filters
-- Name: LPF_V2
-- TestBenchName: LPF_V2_tb
-- TestBenchStimulus: impulse step ramp chirp noise 
-- GenerateHDLTestBench: off

-- Filter Specifications:
--
-- Sample Rate     : 50 MHz
-- Response        : Lowpass
-- Specification   : Fp,Fst,Ap,Ast
-- Stopband Atten. : 40 dB
-- Stopband Edge   : 9 MHz
-- Passband Ripple : 1 dB
-- Passband Edge   : 200 kHz
-- -------------------------------------------------------------

-- -------------------------------------------------------------
-- HDL Implementation    : Fully parallel
-- Folding Factor        : 1
-- -------------------------------------------------------------
-- Filter Settings:
--
-- Discrete-Time FIR Filter (real)
-- -------------------------------
-- Filter Structure  : Direct-Form FIR
-- Filter Length     : 10
-- Stable            : Yes
-- Linear Phase      : Yes (Type 2)
-- Arithmetic        : fixed
-- Numerator         : s16,17 -> [-2.500000e-01 2.500000e-01)
-- Input             : s16,0 -> [-32768 32768)
-- Filter Internals  : Full Precision
--   Output          : s33,17 -> [-32768 32768)  (auto determined)
--   Product         : s31,17 -> [-8192 8192)  (auto determined)
--   Accumulator     : s33,17 -> [-32768 32768)  (auto determined)
--   Round Mode      : No rounding
--   Overflow Mode   : No overflow
-- -------------------------------------------------------------



LIBRARY IEEE;
USE IEEE.std_logic_1164.all;
USE IEEE.numeric_std.ALL;

ENTITY LPF_V2 IS
   PORT( clk                             :   IN    std_logic; 
         clk_enable                      :   IN    std_logic; 
         reset                           :   IN    std_logic; 
         filter_in                       :   IN    std_logic_vector(15 DOWNTO 0); -- sfix16
         filter_out                      :   OUT   std_logic_vector(32 DOWNTO 0)  -- sfix33_En17
         );

END LPF_V2;


----------------------------------------------------------------
--Module Architecture: LPF_V2
----------------------------------------------------------------
ARCHITECTURE rtl OF LPF_V2 IS
  -- Local Functions
  -- Type Definitions
  TYPE delay_pipeline_type IS ARRAY (NATURAL range <>) OF signed(15 DOWNTO 0); -- sfix16
  -- Constants
  CONSTANT coeff1                         : signed(15 DOWNTO 0) := to_signed(2620, 16); -- sfix16_En17
  CONSTANT coeff2                         : signed(15 DOWNTO 0) := to_signed(6778, 16); -- sfix16_En17
  CONSTANT coeff3                         : signed(15 DOWNTO 0) := to_signed(12617, 16); -- sfix16_En17
  CONSTANT coeff4                         : signed(15 DOWNTO 0) := to_signed(18369, 16); -- sfix16_En17
  CONSTANT coeff5                         : signed(15 DOWNTO 0) := to_signed(21965, 16); -- sfix16_En17
  CONSTANT coeff6                         : signed(15 DOWNTO 0) := to_signed(21965, 16); -- sfix16_En17
  CONSTANT coeff7                         : signed(15 DOWNTO 0) := to_signed(18369, 16); -- sfix16_En17
  CONSTANT coeff8                         : signed(15 DOWNTO 0) := to_signed(12617, 16); -- sfix16_En17
  CONSTANT coeff9                         : signed(15 DOWNTO 0) := to_signed(6778, 16); -- sfix16_En17
  CONSTANT coeff10                        : signed(15 DOWNTO 0) := to_signed(2620, 16); -- sfix16_En17

  -- Signals
  SIGNAL delay_pipeline                   : delay_pipeline_type(0 TO 9); -- sfix16
  SIGNAL product10                        : signed(30 DOWNTO 0); -- sfix31_En17
  SIGNAL mul_temp                         : signed(31 DOWNTO 0); -- sfix32_En17
  SIGNAL product9                         : signed(30 DOWNTO 0); -- sfix31_En17
  SIGNAL mul_temp_1                       : signed(31 DOWNTO 0); -- sfix32_En17
  SIGNAL product8                         : signed(30 DOWNTO 0); -- sfix31_En17
  SIGNAL mul_temp_2                       : signed(31 DOWNTO 0); -- sfix32_En17
  SIGNAL product7                         : signed(30 DOWNTO 0); -- sfix31_En17
  SIGNAL mul_temp_3                       : signed(31 DOWNTO 0); -- sfix32_En17
  SIGNAL product6                         : signed(30 DOWNTO 0); -- sfix31_En17
  SIGNAL mul_temp_4                       : signed(31 DOWNTO 0); -- sfix32_En17
  SIGNAL product5                         : signed(30 DOWNTO 0); -- sfix31_En17
  SIGNAL mul_temp_5                       : signed(31 DOWNTO 0); -- sfix32_En17
  SIGNAL product4                         : signed(30 DOWNTO 0); -- sfix31_En17
  SIGNAL mul_temp_6                       : signed(31 DOWNTO 0); -- sfix32_En17
  SIGNAL product3                         : signed(30 DOWNTO 0); -- sfix31_En17
  SIGNAL mul_temp_7                       : signed(31 DOWNTO 0); -- sfix32_En17
  SIGNAL product2                         : signed(30 DOWNTO 0); -- sfix31_En17
  SIGNAL mul_temp_8                       : signed(31 DOWNTO 0); -- sfix32_En17
  SIGNAL product1_cast                    : signed(32 DOWNTO 0); -- sfix33_En17
  SIGNAL product1                         : signed(30 DOWNTO 0); -- sfix31_En17
  SIGNAL mul_temp_9                       : signed(31 DOWNTO 0); -- sfix32_En17
  SIGNAL sum1                             : signed(32 DOWNTO 0); -- sfix33_En17
  SIGNAL add_temp                         : signed(33 DOWNTO 0); -- sfix34_En17
  SIGNAL sum2                             : signed(32 DOWNTO 0); -- sfix33_En17
  SIGNAL add_temp_1                       : signed(33 DOWNTO 0); -- sfix34_En17
  SIGNAL sum3                             : signed(32 DOWNTO 0); -- sfix33_En17
  SIGNAL add_temp_2                       : signed(33 DOWNTO 0); -- sfix34_En17
  SIGNAL sum4                             : signed(32 DOWNTO 0); -- sfix33_En17
  SIGNAL add_temp_3                       : signed(33 DOWNTO 0); -- sfix34_En17
  SIGNAL sum5                             : signed(32 DOWNTO 0); -- sfix33_En17
  SIGNAL add_temp_4                       : signed(33 DOWNTO 0); -- sfix34_En17
  SIGNAL sum6                             : signed(32 DOWNTO 0); -- sfix33_En17
  SIGNAL add_temp_5                       : signed(33 DOWNTO 0); -- sfix34_En17
  SIGNAL sum7                             : signed(32 DOWNTO 0); -- sfix33_En17
  SIGNAL add_temp_6                       : signed(33 DOWNTO 0); -- sfix34_En17
  SIGNAL sum8                             : signed(32 DOWNTO 0); -- sfix33_En17
  SIGNAL add_temp_7                       : signed(33 DOWNTO 0); -- sfix34_En17
  SIGNAL sum9                             : signed(32 DOWNTO 0); -- sfix33_En17
  SIGNAL add_temp_8                       : signed(33 DOWNTO 0); -- sfix34_En17
  SIGNAL output_typeconvert               : signed(32 DOWNTO 0); -- sfix33_En17
  SIGNAL output_register                  : signed(32 DOWNTO 0); -- sfix33_En17


BEGIN

  -- Block Statements
  Delay_Pipeline_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delay_pipeline(0 TO 9) <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        delay_pipeline(0) <= signed(filter_in);
        delay_pipeline(1 TO 9) <= delay_pipeline(0 TO 8);
      END IF;
    END IF; 
  END PROCESS Delay_Pipeline_process;

  mul_temp <= delay_pipeline(9) * coeff10;
  product10 <= mul_temp(30 DOWNTO 0);

  mul_temp_1 <= delay_pipeline(8) * coeff9;
  product9 <= mul_temp_1(30 DOWNTO 0);

  mul_temp_2 <= delay_pipeline(7) * coeff8;
  product8 <= mul_temp_2(30 DOWNTO 0);

  mul_temp_3 <= delay_pipeline(6) * coeff7;
  product7 <= mul_temp_3(30 DOWNTO 0);

  mul_temp_4 <= delay_pipeline(5) * coeff6;
  product6 <= mul_temp_4(30 DOWNTO 0);

  mul_temp_5 <= delay_pipeline(4) * coeff5;
  product5 <= mul_temp_5(30 DOWNTO 0);

  mul_temp_6 <= delay_pipeline(3) * coeff4;
  product4 <= mul_temp_6(30 DOWNTO 0);

  mul_temp_7 <= delay_pipeline(2) * coeff3;
  product3 <= mul_temp_7(30 DOWNTO 0);

  mul_temp_8 <= delay_pipeline(1) * coeff2;
  product2 <= mul_temp_8(30 DOWNTO 0);

  product1_cast <= resize(product1, 33);

  mul_temp_9 <= delay_pipeline(0) * coeff1;
  product1 <= mul_temp_9(30 DOWNTO 0);

  add_temp <= resize(product1_cast, 34) + resize(product2, 34);
  sum1 <= add_temp(32 DOWNTO 0);

  add_temp_1 <= resize(sum1, 34) + resize(product3, 34);
  sum2 <= add_temp_1(32 DOWNTO 0);

  add_temp_2 <= resize(sum2, 34) + resize(product4, 34);
  sum3 <= add_temp_2(32 DOWNTO 0);

  add_temp_3 <= resize(sum3, 34) + resize(product5, 34);
  sum4 <= add_temp_3(32 DOWNTO 0);

  add_temp_4 <= resize(sum4, 34) + resize(product6, 34);
  sum5 <= add_temp_4(32 DOWNTO 0);

  add_temp_5 <= resize(sum5, 34) + resize(product7, 34);
  sum6 <= add_temp_5(32 DOWNTO 0);

  add_temp_6 <= resize(sum6, 34) + resize(product8, 34);
  sum7 <= add_temp_6(32 DOWNTO 0);

  add_temp_7 <= resize(sum7, 34) + resize(product9, 34);
  sum8 <= add_temp_7(32 DOWNTO 0);

  add_temp_8 <= resize(sum8, 34) + resize(product10, 34);
  sum9 <= add_temp_8(32 DOWNTO 0);

  output_typeconvert <= sum9;

  Output_Register_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      output_register <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        output_register <= output_typeconvert;
      END IF;
    END IF; 
  END PROCESS Output_Register_process;

  -- Assignment Statements
  filter_out <= std_logic_vector(output_register);
END rtl;
