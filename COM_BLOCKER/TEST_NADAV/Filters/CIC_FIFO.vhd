-- -------------------------------------------------------------
--
-- Module: CIC_FIFO
-- Generated by MATLAB(R) 9.10 and Filter Design HDL Coder 3.1.9.
-- Generated on: 2022-09-07 12:34:43
-- -------------------------------------------------------------

-- -------------------------------------------------------------
-- HDL Code Generation Options:
--
-- TargetLanguage: VHDL
-- OptimizeForHDL: on
-- TargetDirectory: C:\Users\Elia Yfrach\Desktop\Project\Processing_Unit\Filters
-- Name: CIC_FIFO
-- TestBenchName: CIC_FIFO_tb
-- TestBenchStimulus: step ramp chirp noise 
-- GenerateHDLTestBench: off

-- Filter Specifications:
--
-- Sample Rate        : 45.955 kHz
-- Response           : CIC Compensator
-- Specification      : Fp,Fst,Ap,Ast
-- Decimation Factor  : 5
-- Multirate Type     : Decimator
-- Stopband Atten.    : 40 dB
-- Differential Delay : 1
-- Number of Sections : 2
-- Stopband Edge      : 4.5 kHz
-- Passband Ripple    : 1 dB
-- Passband Edge      : 180 Hz
-- -------------------------------------------------------------

-- -------------------------------------------------------------
-- HDL Implementation    : Fully parallel
-- Folding Factor        : 1
-- -------------------------------------------------------------
-- Filter Settings:
--
-- Discrete-Time FIR Multirate Filter (real)
-- -----------------------------------------
-- Filter Structure   : Direct-Form FIR Polyphase Decimator
-- Decimation Factor  : 5
-- Polyphase Length   : 4
-- Filter Length      : 18
-- Stable             : Yes
-- Linear Phase       : Yes (Type 2)
--
-- Arithmetic         : fixed
-- Numerator          : s17,19 -> [-1.250000e-01 1.250000e-01)
-- -------------------------------------------------------------



LIBRARY IEEE;
USE IEEE.std_logic_1164.all;
USE IEEE.numeric_std.ALL;

ENTITY CIC_FIFO IS
   PORT( clk                             :   IN    std_logic; 
         clk_enable                      :   IN    std_logic; 
         reset                           :   IN    std_logic; 
         filter_in                       :   IN    std_logic_vector(16 DOWNTO 0); -- sfix17
         filter_out                      :   OUT   std_logic_vector(35 DOWNTO 0); -- sfix36_En19
         ce_out                          :   OUT   std_logic  
         );

END CIC_FIFO;


----------------------------------------------------------------
--Module Architecture: CIC_FIFO
----------------------------------------------------------------
ARCHITECTURE rtl OF CIC_FIFO IS
  -- Local Functions
  -- Type Definitions
  TYPE input_pipeline_type IS ARRAY (NATURAL range <>) OF signed(16 DOWNTO 0); -- sfix17
  -- Constants
  CONSTANT coeffphase1_1                  : signed(16 DOWNTO 0) := to_signed(5555, 17); -- sfix17_En19
  CONSTANT coeffphase1_2                  : signed(16 DOWNTO 0) := to_signed(35257, 17); -- sfix17_En19
  CONSTANT coeffphase1_3                  : signed(16 DOWNTO 0) := to_signed(46219, 17); -- sfix17_En19
  CONSTANT coeffphase1_4                  : signed(16 DOWNTO 0) := to_signed(14210, 17); -- sfix17_En19
  CONSTANT coeffphase2_1                  : signed(16 DOWNTO 0) := to_signed(8655, 17); -- sfix17_En19
  CONSTANT coeffphase2_2                  : signed(16 DOWNTO 0) := to_signed(41539, 17); -- sfix17_En19
  CONSTANT coeffphase2_3                  : signed(16 DOWNTO 0) := to_signed(41539, 17); -- sfix17_En19
  CONSTANT coeffphase2_4                  : signed(16 DOWNTO 0) := to_signed(8655, 17); -- sfix17_En19
  CONSTANT coeffphase3_1                  : signed(16 DOWNTO 0) := to_signed(14210, 17); -- sfix17_En19
  CONSTANT coeffphase3_2                  : signed(16 DOWNTO 0) := to_signed(46219, 17); -- sfix17_En19
  CONSTANT coeffphase3_3                  : signed(16 DOWNTO 0) := to_signed(35257, 17); -- sfix17_En19
  CONSTANT coeffphase3_4                  : signed(16 DOWNTO 0) := to_signed(5555, 17); -- sfix17_En19
  CONSTANT coeffphase4_1                  : signed(16 DOWNTO 0) := to_signed(20863, 17); -- sfix17_En19
  CONSTANT coeffphase4_2                  : signed(16 DOWNTO 0) := to_signed(48714, 17); -- sfix17_En19
  CONSTANT coeffphase4_3                  : signed(16 DOWNTO 0) := to_signed(28111, 17); -- sfix17_En19
  CONSTANT coeffphase4_4                  : signed(16 DOWNTO 0) := to_signed(0, 17); -- sfix17_En19
  CONSTANT coeffphase5_1                  : signed(16 DOWNTO 0) := to_signed(28111, 17); -- sfix17_En19
  CONSTANT coeffphase5_2                  : signed(16 DOWNTO 0) := to_signed(48714, 17); -- sfix17_En19
  CONSTANT coeffphase5_3                  : signed(16 DOWNTO 0) := to_signed(20863, 17); -- sfix17_En19
  CONSTANT coeffphase5_4                  : signed(16 DOWNTO 0) := to_signed(0, 17); -- sfix17_En19

  -- Signals
  SIGNAL ring_count                       : unsigned(4 DOWNTO 0); -- ufix5
  SIGNAL phase_0                          : std_logic; -- boolean
  SIGNAL phase_1                          : std_logic; -- boolean
  SIGNAL phase_2                          : std_logic; -- boolean
  SIGNAL phase_3                          : std_logic; -- boolean
  SIGNAL phase_4                          : std_logic; -- boolean
  SIGNAL ce_out_reg                       : std_logic; -- boolean
  SIGNAL input_register                   : signed(16 DOWNTO 0); -- sfix17
  SIGNAL input_pipeline_phase0            : input_pipeline_type(0 TO 2); -- sfix17
  SIGNAL input_pipeline_phase1            : input_pipeline_type(0 TO 3); -- sfix17
  SIGNAL input_pipeline_phase2            : input_pipeline_type(0 TO 3); -- sfix17
  SIGNAL input_pipeline_phase3            : input_pipeline_type(0 TO 2); -- sfix17
  SIGNAL input_pipeline_phase4            : input_pipeline_type(0 TO 2); -- sfix17
  SIGNAL tapsum1                          : signed(17 DOWNTO 0); -- sfix18
  SIGNAL tapsum2                          : signed(17 DOWNTO 0); -- sfix18
  SIGNAL product_phase0_1                 : signed(33 DOWNTO 0); -- sfix34_En19
  SIGNAL product_phase0_2                 : signed(33 DOWNTO 0); -- sfix34_En19
  SIGNAL product_phase0_3                 : signed(33 DOWNTO 0); -- sfix34_En19
  SIGNAL product_phase0_4                 : signed(33 DOWNTO 0); -- sfix34_En19
  SIGNAL product_phase1_1                 : signed(33 DOWNTO 0); -- sfix34_En19
  SIGNAL product_phase1_2                 : signed(33 DOWNTO 0); -- sfix34_En19
  SIGNAL product_phase1_3                 : signed(33 DOWNTO 0); -- sfix34_En19
  SIGNAL product_phase1_4                 : signed(33 DOWNTO 0); -- sfix34_En19
  SIGNAL product_phase2_1                 : signed(33 DOWNTO 0); -- sfix34_En19
  SIGNAL product_phase2_2                 : signed(33 DOWNTO 0); -- sfix34_En19
  SIGNAL product_phase2_3                 : signed(33 DOWNTO 0); -- sfix34_En19
  SIGNAL product_phase2_4                 : signed(33 DOWNTO 0); -- sfix34_En19
  SIGNAL product_phase3_1                 : signed(33 DOWNTO 0); -- sfix34_En19
  SIGNAL product_phase3_2                 : signed(33 DOWNTO 0); -- sfix34_En19
  SIGNAL product_phase3_3                 : signed(33 DOWNTO 0); -- sfix34_En19
  SIGNAL product_phase4_1                 : signed(33 DOWNTO 0); -- sfix34_En19
  SIGNAL product_phase4_2                 : signed(33 DOWNTO 0); -- sfix34_En19
  SIGNAL product_phase4_3                 : signed(33 DOWNTO 0); -- sfix34_En19
  SIGNAL sum1                             : signed(35 DOWNTO 0); -- sfix36_En19
  SIGNAL add_temp                         : signed(34 DOWNTO 0); -- sfix35_En19
  SIGNAL sum2                             : signed(35 DOWNTO 0); -- sfix36_En19
  SIGNAL add_temp_1                       : signed(36 DOWNTO 0); -- sfix37_En19
  SIGNAL sum3                             : signed(35 DOWNTO 0); -- sfix36_En19
  SIGNAL add_temp_2                       : signed(36 DOWNTO 0); -- sfix37_En19
  SIGNAL sum4                             : signed(35 DOWNTO 0); -- sfix36_En19
  SIGNAL add_temp_3                       : signed(36 DOWNTO 0); -- sfix37_En19
  SIGNAL sum5                             : signed(35 DOWNTO 0); -- sfix36_En19
  SIGNAL add_temp_4                       : signed(36 DOWNTO 0); -- sfix37_En19
  SIGNAL sum6                             : signed(35 DOWNTO 0); -- sfix36_En19
  SIGNAL add_temp_5                       : signed(36 DOWNTO 0); -- sfix37_En19
  SIGNAL sum7                             : signed(35 DOWNTO 0); -- sfix36_En19
  SIGNAL add_temp_6                       : signed(36 DOWNTO 0); -- sfix37_En19
  SIGNAL sum8                             : signed(35 DOWNTO 0); -- sfix36_En19
  SIGNAL add_temp_7                       : signed(36 DOWNTO 0); -- sfix37_En19
  SIGNAL sum9                             : signed(35 DOWNTO 0); -- sfix36_En19
  SIGNAL add_temp_8                       : signed(36 DOWNTO 0); -- sfix37_En19
  SIGNAL sum10                            : signed(35 DOWNTO 0); -- sfix36_En19
  SIGNAL add_temp_9                       : signed(36 DOWNTO 0); -- sfix37_En19
  SIGNAL sum11                            : signed(35 DOWNTO 0); -- sfix36_En19
  SIGNAL add_temp_10                      : signed(36 DOWNTO 0); -- sfix37_En19
  SIGNAL sum12                            : signed(35 DOWNTO 0); -- sfix36_En19
  SIGNAL add_temp_11                      : signed(36 DOWNTO 0); -- sfix37_En19
  SIGNAL sum13                            : signed(35 DOWNTO 0); -- sfix36_En19
  SIGNAL add_temp_12                      : signed(36 DOWNTO 0); -- sfix37_En19
  SIGNAL sum14                            : signed(35 DOWNTO 0); -- sfix36_En19
  SIGNAL add_temp_13                      : signed(36 DOWNTO 0); -- sfix37_En19
  SIGNAL sum15                            : signed(35 DOWNTO 0); -- sfix36_En19
  SIGNAL add_temp_14                      : signed(36 DOWNTO 0); -- sfix37_En19
  SIGNAL sum16                            : signed(35 DOWNTO 0); -- sfix36_En19
  SIGNAL add_temp_15                      : signed(36 DOWNTO 0); -- sfix37_En19
  SIGNAL sum17                            : signed(35 DOWNTO 0); -- sfix36_En19
  SIGNAL add_temp_16                      : signed(36 DOWNTO 0); -- sfix37_En19
  SIGNAL output_typeconvert               : signed(35 DOWNTO 0); -- sfix36_En19
  SIGNAL output_register                  : signed(35 DOWNTO 0); -- sfix36_En19


BEGIN

  -- Block Statements
  ce_output : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      ring_count <= to_unsigned(1, 5);
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        ring_count <= ring_count(0) & ring_count(4 DOWNTO 1);
      END IF;
    END IF; 
  END PROCESS ce_output;

  phase_0 <= ring_count(0)  AND clk_enable;

  phase_1 <= ring_count(1)  AND clk_enable;

  phase_2 <= ring_count(2)  AND clk_enable;

  phase_3 <= ring_count(3)  AND clk_enable;

  phase_4 <= ring_count(4)  AND clk_enable;

  --   ------------------ CE Output Register ------------------

  ce_output_register : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      ce_out_reg <= '0';
    ELSIF clk'event AND clk = '1' THEN
      ce_out_reg <= phase_4;
      
    END IF; 
  END PROCESS ce_output_register;

  input_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      input_register <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        input_register <= signed(filter_in);
      END IF;
    END IF; 
  END PROCESS input_reg_process;

  Delay_Pipeline_Phase0_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      input_pipeline_phase0(0 TO 2) <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF phase_4 = '1' THEN
        input_pipeline_phase0(0) <= input_register;
        input_pipeline_phase0(1 TO 2) <= input_pipeline_phase0(0 TO 1);
      END IF;
    END IF; 
  END PROCESS Delay_Pipeline_Phase0_process;

  Delay_Pipeline_Phase1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      input_pipeline_phase1(0 TO 3) <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF phase_0 = '1' THEN
        input_pipeline_phase1(0) <= input_register;
        input_pipeline_phase1(1 TO 3) <= input_pipeline_phase1(0 TO 2);
      END IF;
    END IF; 
  END PROCESS Delay_Pipeline_Phase1_process;

  Delay_Pipeline_Phase2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      input_pipeline_phase2(0 TO 3) <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF phase_1 = '1' THEN
        input_pipeline_phase2(0) <= input_register;
        input_pipeline_phase2(1 TO 3) <= input_pipeline_phase2(0 TO 2);
      END IF;
    END IF; 
  END PROCESS Delay_Pipeline_Phase2_process;

  Delay_Pipeline_Phase3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      input_pipeline_phase3(0 TO 2) <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF phase_2 = '1' THEN
        input_pipeline_phase3(0) <= input_register;
        input_pipeline_phase3(1 TO 2) <= input_pipeline_phase3(0 TO 1);
      END IF;
    END IF; 
  END PROCESS Delay_Pipeline_Phase3_process;

  Delay_Pipeline_Phase4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      input_pipeline_phase4(0 TO 2) <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF phase_3 = '1' THEN
        input_pipeline_phase4(0) <= input_register;
        input_pipeline_phase4(1 TO 2) <= input_pipeline_phase4(0 TO 1);
      END IF;
    END IF; 
  END PROCESS Delay_Pipeline_Phase4_process;

  tapsum1 <= resize(input_pipeline_phase1(0), 18) + resize(input_pipeline_phase1(3), 18);

  tapsum2 <= resize(input_pipeline_phase1(1), 18) + resize(input_pipeline_phase1(2), 18);

  product_phase0_1 <= input_register * coeffphase1_1;

  product_phase0_2 <= input_pipeline_phase0(0) * coeffphase1_2;

  product_phase0_3 <= input_pipeline_phase0(1) * coeffphase1_3;

  product_phase0_4 <= input_pipeline_phase0(2) * coeffphase1_4;

  product_phase1_1 <= input_pipeline_phase1(0) * coeffphase2_1;

  product_phase1_2 <= input_pipeline_phase1(1) * coeffphase2_2;

  product_phase1_3 <= input_pipeline_phase1(2) * coeffphase2_3;

  product_phase1_4 <= input_pipeline_phase1(3) * coeffphase2_4;

  product_phase2_1 <= input_pipeline_phase2(0) * coeffphase3_1;

  product_phase2_2 <= input_pipeline_phase2(1) * coeffphase3_2;

  product_phase2_3 <= input_pipeline_phase2(2) * coeffphase3_3;

  product_phase2_4 <= input_pipeline_phase2(3) * coeffphase3_4;

  product_phase3_1 <= input_pipeline_phase3(0) * coeffphase4_1;

  product_phase3_2 <= input_pipeline_phase3(1) * coeffphase4_2;

  product_phase3_3 <= input_pipeline_phase3(2) * coeffphase4_3;

  product_phase4_1 <= input_pipeline_phase4(0) * coeffphase5_1;

  product_phase4_2 <= input_pipeline_phase4(1) * coeffphase5_2;

  product_phase4_3 <= input_pipeline_phase4(2) * coeffphase5_3;

  add_temp <= resize(product_phase4_1, 35) + resize(product_phase4_2, 35);
  sum1 <= resize(add_temp, 36);

  add_temp_1 <= resize(sum1, 37) + resize(product_phase4_3, 37);
  sum2 <= add_temp_1(35 DOWNTO 0);

  add_temp_2 <= resize(sum2, 37) + resize(product_phase3_1, 37);
  sum3 <= add_temp_2(35 DOWNTO 0);

  add_temp_3 <= resize(sum3, 37) + resize(product_phase3_2, 37);
  sum4 <= add_temp_3(35 DOWNTO 0);

  add_temp_4 <= resize(sum4, 37) + resize(product_phase3_3, 37);
  sum5 <= add_temp_4(35 DOWNTO 0);

  add_temp_5 <= resize(sum5, 37) + resize(product_phase2_1, 37);
  sum6 <= add_temp_5(35 DOWNTO 0);

  add_temp_6 <= resize(sum6, 37) + resize(product_phase2_2, 37);
  sum7 <= add_temp_6(35 DOWNTO 0);

  add_temp_7 <= resize(sum7, 37) + resize(product_phase2_3, 37);
  sum8 <= add_temp_7(35 DOWNTO 0);

  add_temp_8 <= resize(sum8, 37) + resize(product_phase2_4, 37);
  sum9 <= add_temp_8(35 DOWNTO 0);

  add_temp_9 <= resize(sum9, 37) + resize(product_phase1_1, 37);
  sum10 <= add_temp_9(35 DOWNTO 0);

  add_temp_10 <= resize(sum10, 37) + resize(product_phase1_2, 37);
  sum11 <= add_temp_10(35 DOWNTO 0);

  add_temp_11 <= resize(sum11, 37) + resize(product_phase1_3, 37);
  sum12 <= add_temp_11(35 DOWNTO 0);

  add_temp_12 <= resize(sum12, 37) + resize(product_phase1_4, 37);
  sum13 <= add_temp_12(35 DOWNTO 0);

  add_temp_13 <= resize(sum13, 37) + resize(product_phase0_1, 37);
  sum14 <= add_temp_13(35 DOWNTO 0);

  add_temp_14 <= resize(sum14, 37) + resize(product_phase0_2, 37);
  sum15 <= add_temp_14(35 DOWNTO 0);

  add_temp_15 <= resize(sum15, 37) + resize(product_phase0_3, 37);
  sum16 <= add_temp_15(35 DOWNTO 0);

  add_temp_16 <= resize(sum16, 37) + resize(product_phase0_4, 37);
  sum17 <= add_temp_16(35 DOWNTO 0);

  output_typeconvert <= sum17;

  output_register_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      output_register <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_4 = '1' THEN
        output_register <= output_typeconvert;
      END IF;
    END IF; 
  END PROCESS output_register_process;

  -- Assignment Statements
  ce_out <= ce_out_reg;
  filter_out <= std_logic_vector(output_register);
END rtl;
