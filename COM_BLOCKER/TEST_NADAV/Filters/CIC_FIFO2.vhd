-- -------------------------------------------------------------
--
-- Module: CIC_FIFO2
-- Generated by MATLAB(R) 9.10 and Filter Design HDL Coder 3.1.9.
-- Generated on: 2022-09-07 12:54:54
-- -------------------------------------------------------------

-- -------------------------------------------------------------
-- HDL Code Generation Options:
--
-- TargetLanguage: VHDL
-- TargetDirectory: C:\Users\Elia Yfrach\Desktop\Project\Processing_Unit\Filters
-- Name: CIC_FIFO2
-- TestBenchName: CIC_FIFO2_tb
-- TestBenchStimulus: step ramp chirp noise 
-- GenerateHDLTestBench: off

-- -------------------------------------------------------------
-- HDL Implementation    : Fully parallel
-- -------------------------------------------------------------
-- Filter Settings:
--
-- Discrete-Time FIR Multirate Filter (real)
-- -----------------------------------------
-- Filter Structure    : Cascaded Integrator-Comb Decimator
-- Decimation Factor   : 5
-- Differential Delay  : 1
-- Number of Sections  : 11
-- Stable              : Yes
-- Linear Phase        : Yes (Type 1)
--
-- -------------------------------------------------------------



LIBRARY IEEE;
USE IEEE.std_logic_1164.all;
USE IEEE.numeric_std.ALL;

ENTITY CIC_FIFO2 IS
   PORT( clk                             :   IN    std_logic; 
         clk_enable                      :   IN    std_logic; 
         reset                           :   IN    std_logic; 
         filter_in                       :   IN    std_logic_vector(16 DOWNTO 0); -- sfix17
         filter_out                      :   OUT   std_logic_vector(42 DOWNTO 0); -- sfix43
         ce_out                          :   OUT   std_logic  
         );

END CIC_FIFO2;


----------------------------------------------------------------
--Module Architecture: CIC_FIFO2
----------------------------------------------------------------
ARCHITECTURE rtl OF CIC_FIFO2 IS
  -- Local Functions
  -- Type Definitions
  -- Constants
  -- Signals
  SIGNAL cur_count                        : unsigned(2 DOWNTO 0); -- ufix3
  SIGNAL phase_1                          : std_logic; -- boolean
  SIGNAL ce_out_reg                       : std_logic; -- boolean
  --   
  SIGNAL input_register                   : signed(16 DOWNTO 0); -- sfix17
  --   -- Section 1 Signals 
  SIGNAL section_in1                      : signed(16 DOWNTO 0); -- sfix17
  SIGNAL section_cast1                    : signed(42 DOWNTO 0); -- sfix43
  SIGNAL sum1                             : signed(42 DOWNTO 0); -- sfix43
  SIGNAL section_out1                     : signed(42 DOWNTO 0); -- sfix43
  SIGNAL add_cast                         : signed(42 DOWNTO 0); -- sfix43
  SIGNAL add_cast_1                       : signed(42 DOWNTO 0); -- sfix43
  SIGNAL add_temp                         : signed(43 DOWNTO 0); -- sfix44
  --   -- Section 2 Signals 
  SIGNAL section_in2                      : signed(42 DOWNTO 0); -- sfix43
  SIGNAL sum2                             : signed(42 DOWNTO 0); -- sfix43
  SIGNAL section_out2                     : signed(42 DOWNTO 0); -- sfix43
  SIGNAL add_cast_2                       : signed(42 DOWNTO 0); -- sfix43
  SIGNAL add_cast_3                       : signed(42 DOWNTO 0); -- sfix43
  SIGNAL add_temp_1                       : signed(43 DOWNTO 0); -- sfix44
  --   -- Section 3 Signals 
  SIGNAL section_in3                      : signed(42 DOWNTO 0); -- sfix43
  SIGNAL sum3                             : signed(42 DOWNTO 0); -- sfix43
  SIGNAL section_out3                     : signed(42 DOWNTO 0); -- sfix43
  SIGNAL add_cast_4                       : signed(42 DOWNTO 0); -- sfix43
  SIGNAL add_cast_5                       : signed(42 DOWNTO 0); -- sfix43
  SIGNAL add_temp_2                       : signed(43 DOWNTO 0); -- sfix44
  --   -- Section 4 Signals 
  SIGNAL section_in4                      : signed(42 DOWNTO 0); -- sfix43
  SIGNAL sum4                             : signed(42 DOWNTO 0); -- sfix43
  SIGNAL section_out4                     : signed(42 DOWNTO 0); -- sfix43
  SIGNAL add_cast_6                       : signed(42 DOWNTO 0); -- sfix43
  SIGNAL add_cast_7                       : signed(42 DOWNTO 0); -- sfix43
  SIGNAL add_temp_3                       : signed(43 DOWNTO 0); -- sfix44
  --   -- Section 5 Signals 
  SIGNAL section_in5                      : signed(42 DOWNTO 0); -- sfix43
  SIGNAL sum5                             : signed(42 DOWNTO 0); -- sfix43
  SIGNAL section_out5                     : signed(42 DOWNTO 0); -- sfix43
  SIGNAL add_cast_8                       : signed(42 DOWNTO 0); -- sfix43
  SIGNAL add_cast_9                       : signed(42 DOWNTO 0); -- sfix43
  SIGNAL add_temp_4                       : signed(43 DOWNTO 0); -- sfix44
  --   -- Section 6 Signals 
  SIGNAL section_in6                      : signed(42 DOWNTO 0); -- sfix43
  SIGNAL sum6                             : signed(42 DOWNTO 0); -- sfix43
  SIGNAL section_out6                     : signed(42 DOWNTO 0); -- sfix43
  SIGNAL add_cast_10                      : signed(42 DOWNTO 0); -- sfix43
  SIGNAL add_cast_11                      : signed(42 DOWNTO 0); -- sfix43
  SIGNAL add_temp_5                       : signed(43 DOWNTO 0); -- sfix44
  --   -- Section 7 Signals 
  SIGNAL section_in7                      : signed(42 DOWNTO 0); -- sfix43
  SIGNAL sum7                             : signed(42 DOWNTO 0); -- sfix43
  SIGNAL section_out7                     : signed(42 DOWNTO 0); -- sfix43
  SIGNAL add_cast_12                      : signed(42 DOWNTO 0); -- sfix43
  SIGNAL add_cast_13                      : signed(42 DOWNTO 0); -- sfix43
  SIGNAL add_temp_6                       : signed(43 DOWNTO 0); -- sfix44
  --   -- Section 8 Signals 
  SIGNAL section_in8                      : signed(42 DOWNTO 0); -- sfix43
  SIGNAL sum8                             : signed(42 DOWNTO 0); -- sfix43
  SIGNAL section_out8                     : signed(42 DOWNTO 0); -- sfix43
  SIGNAL add_cast_14                      : signed(42 DOWNTO 0); -- sfix43
  SIGNAL add_cast_15                      : signed(42 DOWNTO 0); -- sfix43
  SIGNAL add_temp_7                       : signed(43 DOWNTO 0); -- sfix44
  --   -- Section 9 Signals 
  SIGNAL section_in9                      : signed(42 DOWNTO 0); -- sfix43
  SIGNAL sum9                             : signed(42 DOWNTO 0); -- sfix43
  SIGNAL section_out9                     : signed(42 DOWNTO 0); -- sfix43
  SIGNAL add_cast_16                      : signed(42 DOWNTO 0); -- sfix43
  SIGNAL add_cast_17                      : signed(42 DOWNTO 0); -- sfix43
  SIGNAL add_temp_8                       : signed(43 DOWNTO 0); -- sfix44
  --   -- Section 10 Signals 
  SIGNAL section_in10                     : signed(42 DOWNTO 0); -- sfix43
  SIGNAL sum10                            : signed(42 DOWNTO 0); -- sfix43
  SIGNAL section_out10                    : signed(42 DOWNTO 0); -- sfix43
  SIGNAL add_cast_18                      : signed(42 DOWNTO 0); -- sfix43
  SIGNAL add_cast_19                      : signed(42 DOWNTO 0); -- sfix43
  SIGNAL add_temp_9                       : signed(43 DOWNTO 0); -- sfix44
  --   -- Section 11 Signals 
  SIGNAL section_in11                     : signed(42 DOWNTO 0); -- sfix43
  SIGNAL sum11                            : signed(42 DOWNTO 0); -- sfix43
  SIGNAL section_out11                    : signed(42 DOWNTO 0); -- sfix43
  SIGNAL add_cast_20                      : signed(42 DOWNTO 0); -- sfix43
  SIGNAL add_cast_21                      : signed(42 DOWNTO 0); -- sfix43
  SIGNAL add_temp_10                      : signed(43 DOWNTO 0); -- sfix44
  --   -- Section 12 Signals 
  SIGNAL section_in12                     : signed(42 DOWNTO 0); -- sfix43
  SIGNAL diff1                            : signed(42 DOWNTO 0); -- sfix43
  SIGNAL section_out12                    : signed(42 DOWNTO 0); -- sfix43
  SIGNAL sub_cast                         : signed(42 DOWNTO 0); -- sfix43
  SIGNAL sub_cast_1                       : signed(42 DOWNTO 0); -- sfix43
  SIGNAL sub_temp                         : signed(43 DOWNTO 0); -- sfix44
  --   -- Section 13 Signals 
  SIGNAL section_in13                     : signed(42 DOWNTO 0); -- sfix43
  SIGNAL diff2                            : signed(42 DOWNTO 0); -- sfix43
  SIGNAL section_out13                    : signed(42 DOWNTO 0); -- sfix43
  SIGNAL sub_cast_2                       : signed(42 DOWNTO 0); -- sfix43
  SIGNAL sub_cast_3                       : signed(42 DOWNTO 0); -- sfix43
  SIGNAL sub_temp_1                       : signed(43 DOWNTO 0); -- sfix44
  --   -- Section 14 Signals 
  SIGNAL section_in14                     : signed(42 DOWNTO 0); -- sfix43
  SIGNAL diff3                            : signed(42 DOWNTO 0); -- sfix43
  SIGNAL section_out14                    : signed(42 DOWNTO 0); -- sfix43
  SIGNAL sub_cast_4                       : signed(42 DOWNTO 0); -- sfix43
  SIGNAL sub_cast_5                       : signed(42 DOWNTO 0); -- sfix43
  SIGNAL sub_temp_2                       : signed(43 DOWNTO 0); -- sfix44
  --   -- Section 15 Signals 
  SIGNAL section_in15                     : signed(42 DOWNTO 0); -- sfix43
  SIGNAL diff4                            : signed(42 DOWNTO 0); -- sfix43
  SIGNAL section_out15                    : signed(42 DOWNTO 0); -- sfix43
  SIGNAL sub_cast_6                       : signed(42 DOWNTO 0); -- sfix43
  SIGNAL sub_cast_7                       : signed(42 DOWNTO 0); -- sfix43
  SIGNAL sub_temp_3                       : signed(43 DOWNTO 0); -- sfix44
  --   -- Section 16 Signals 
  SIGNAL section_in16                     : signed(42 DOWNTO 0); -- sfix43
  SIGNAL diff5                            : signed(42 DOWNTO 0); -- sfix43
  SIGNAL section_out16                    : signed(42 DOWNTO 0); -- sfix43
  SIGNAL sub_cast_8                       : signed(42 DOWNTO 0); -- sfix43
  SIGNAL sub_cast_9                       : signed(42 DOWNTO 0); -- sfix43
  SIGNAL sub_temp_4                       : signed(43 DOWNTO 0); -- sfix44
  --   -- Section 17 Signals 
  SIGNAL section_in17                     : signed(42 DOWNTO 0); -- sfix43
  SIGNAL diff6                            : signed(42 DOWNTO 0); -- sfix43
  SIGNAL section_out17                    : signed(42 DOWNTO 0); -- sfix43
  SIGNAL sub_cast_10                      : signed(42 DOWNTO 0); -- sfix43
  SIGNAL sub_cast_11                      : signed(42 DOWNTO 0); -- sfix43
  SIGNAL sub_temp_5                       : signed(43 DOWNTO 0); -- sfix44
  --   -- Section 18 Signals 
  SIGNAL section_in18                     : signed(42 DOWNTO 0); -- sfix43
  SIGNAL diff7                            : signed(42 DOWNTO 0); -- sfix43
  SIGNAL section_out18                    : signed(42 DOWNTO 0); -- sfix43
  SIGNAL sub_cast_12                      : signed(42 DOWNTO 0); -- sfix43
  SIGNAL sub_cast_13                      : signed(42 DOWNTO 0); -- sfix43
  SIGNAL sub_temp_6                       : signed(43 DOWNTO 0); -- sfix44
  --   -- Section 19 Signals 
  SIGNAL section_in19                     : signed(42 DOWNTO 0); -- sfix43
  SIGNAL diff8                            : signed(42 DOWNTO 0); -- sfix43
  SIGNAL section_out19                    : signed(42 DOWNTO 0); -- sfix43
  SIGNAL sub_cast_14                      : signed(42 DOWNTO 0); -- sfix43
  SIGNAL sub_cast_15                      : signed(42 DOWNTO 0); -- sfix43
  SIGNAL sub_temp_7                       : signed(43 DOWNTO 0); -- sfix44
  --   -- Section 20 Signals 
  SIGNAL section_in20                     : signed(42 DOWNTO 0); -- sfix43
  SIGNAL diff9                            : signed(42 DOWNTO 0); -- sfix43
  SIGNAL section_out20                    : signed(42 DOWNTO 0); -- sfix43
  SIGNAL sub_cast_16                      : signed(42 DOWNTO 0); -- sfix43
  SIGNAL sub_cast_17                      : signed(42 DOWNTO 0); -- sfix43
  SIGNAL sub_temp_8                       : signed(43 DOWNTO 0); -- sfix44
  --   -- Section 21 Signals 
  SIGNAL section_in21                     : signed(42 DOWNTO 0); -- sfix43
  SIGNAL diff10                           : signed(42 DOWNTO 0); -- sfix43
  SIGNAL section_out21                    : signed(42 DOWNTO 0); -- sfix43
  SIGNAL sub_cast_18                      : signed(42 DOWNTO 0); -- sfix43
  SIGNAL sub_cast_19                      : signed(42 DOWNTO 0); -- sfix43
  SIGNAL sub_temp_9                       : signed(43 DOWNTO 0); -- sfix44
  --   -- Section 22 Signals 
  SIGNAL section_in22                     : signed(42 DOWNTO 0); -- sfix43
  SIGNAL diff11                           : signed(42 DOWNTO 0); -- sfix43
  SIGNAL section_out22                    : signed(42 DOWNTO 0); -- sfix43
  SIGNAL sub_cast_20                      : signed(42 DOWNTO 0); -- sfix43
  SIGNAL sub_cast_21                      : signed(42 DOWNTO 0); -- sfix43
  SIGNAL sub_temp_10                      : signed(43 DOWNTO 0); -- sfix44
  --   
  SIGNAL output_register                  : signed(42 DOWNTO 0); -- sfix43


BEGIN

  -- Block Statements
  --   ------------------ CE Output Generation ------------------

  ce_output : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      cur_count <= to_unsigned(0, 3);
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        IF cur_count >= to_unsigned(4, 3) THEN
          cur_count <= to_unsigned(0, 3);
        ELSE
          cur_count <= cur_count + to_unsigned(1, 3);
        END IF;
      END IF;
    END IF; 
  END PROCESS ce_output;

  phase_1 <= '1' WHEN cur_count = to_unsigned(1, 3) AND clk_enable = '1' ELSE '0';

  --   ------------------ CE Output Register ------------------

  ce_output_register : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      ce_out_reg <= '0';
    ELSIF clk'event AND clk = '1' THEN
      ce_out_reg <= phase_1;
      
    END IF; 
  END PROCESS ce_output_register;

  --   ------------------ Input Register ------------------

  input_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      input_register <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        input_register <= signed(filter_in);
      END IF;
    END IF; 
  END PROCESS input_reg_process;

  --   ------------------ Section # 1 : Integrator ------------------

  section_in1 <= input_register;

  section_cast1 <= resize(section_in1, 43);

  add_cast <= section_cast1;
  add_cast_1 <= section_out1;
  add_temp <= resize(add_cast, 44) + resize(add_cast_1, 44);
  sum1 <= add_temp(42 DOWNTO 0);

  integrator_delay_section1 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      section_out1 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        section_out1 <= sum1;
      END IF;
    END IF; 
  END PROCESS integrator_delay_section1;

  --   ------------------ Section # 2 : Integrator ------------------

  section_in2 <= section_out1;

  add_cast_2 <= section_in2;
  add_cast_3 <= section_out2;
  add_temp_1 <= resize(add_cast_2, 44) + resize(add_cast_3, 44);
  sum2 <= add_temp_1(42 DOWNTO 0);

  integrator_delay_section2 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      section_out2 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        section_out2 <= sum2;
      END IF;
    END IF; 
  END PROCESS integrator_delay_section2;

  --   ------------------ Section # 3 : Integrator ------------------

  section_in3 <= section_out2;

  add_cast_4 <= section_in3;
  add_cast_5 <= section_out3;
  add_temp_2 <= resize(add_cast_4, 44) + resize(add_cast_5, 44);
  sum3 <= add_temp_2(42 DOWNTO 0);

  integrator_delay_section3 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      section_out3 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        section_out3 <= sum3;
      END IF;
    END IF; 
  END PROCESS integrator_delay_section3;

  --   ------------------ Section # 4 : Integrator ------------------

  section_in4 <= section_out3;

  add_cast_6 <= section_in4;
  add_cast_7 <= section_out4;
  add_temp_3 <= resize(add_cast_6, 44) + resize(add_cast_7, 44);
  sum4 <= add_temp_3(42 DOWNTO 0);

  integrator_delay_section4 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      section_out4 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        section_out4 <= sum4;
      END IF;
    END IF; 
  END PROCESS integrator_delay_section4;

  --   ------------------ Section # 5 : Integrator ------------------

  section_in5 <= section_out4;

  add_cast_8 <= section_in5;
  add_cast_9 <= section_out5;
  add_temp_4 <= resize(add_cast_8, 44) + resize(add_cast_9, 44);
  sum5 <= add_temp_4(42 DOWNTO 0);

  integrator_delay_section5 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      section_out5 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        section_out5 <= sum5;
      END IF;
    END IF; 
  END PROCESS integrator_delay_section5;

  --   ------------------ Section # 6 : Integrator ------------------

  section_in6 <= section_out5;

  add_cast_10 <= section_in6;
  add_cast_11 <= section_out6;
  add_temp_5 <= resize(add_cast_10, 44) + resize(add_cast_11, 44);
  sum6 <= add_temp_5(42 DOWNTO 0);

  integrator_delay_section6 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      section_out6 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        section_out6 <= sum6;
      END IF;
    END IF; 
  END PROCESS integrator_delay_section6;

  --   ------------------ Section # 7 : Integrator ------------------

  section_in7 <= section_out6;

  add_cast_12 <= section_in7;
  add_cast_13 <= section_out7;
  add_temp_6 <= resize(add_cast_12, 44) + resize(add_cast_13, 44);
  sum7 <= add_temp_6(42 DOWNTO 0);

  integrator_delay_section7 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      section_out7 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        section_out7 <= sum7;
      END IF;
    END IF; 
  END PROCESS integrator_delay_section7;

  --   ------------------ Section # 8 : Integrator ------------------

  section_in8 <= section_out7;

  add_cast_14 <= section_in8;
  add_cast_15 <= section_out8;
  add_temp_7 <= resize(add_cast_14, 44) + resize(add_cast_15, 44);
  sum8 <= add_temp_7(42 DOWNTO 0);

  integrator_delay_section8 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      section_out8 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        section_out8 <= sum8;
      END IF;
    END IF; 
  END PROCESS integrator_delay_section8;

  --   ------------------ Section # 9 : Integrator ------------------

  section_in9 <= section_out8;

  add_cast_16 <= section_in9;
  add_cast_17 <= section_out9;
  add_temp_8 <= resize(add_cast_16, 44) + resize(add_cast_17, 44);
  sum9 <= add_temp_8(42 DOWNTO 0);

  integrator_delay_section9 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      section_out9 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        section_out9 <= sum9;
      END IF;
    END IF; 
  END PROCESS integrator_delay_section9;

  --   ------------------ Section # 10 : Integrator ------------------

  section_in10 <= section_out9;

  add_cast_18 <= section_in10;
  add_cast_19 <= section_out10;
  add_temp_9 <= resize(add_cast_18, 44) + resize(add_cast_19, 44);
  sum10 <= add_temp_9(42 DOWNTO 0);

  integrator_delay_section10 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      section_out10 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        section_out10 <= sum10;
      END IF;
    END IF; 
  END PROCESS integrator_delay_section10;

  --   ------------------ Section # 11 : Integrator ------------------

  section_in11 <= section_out10;

  add_cast_20 <= section_in11;
  add_cast_21 <= section_out11;
  add_temp_10 <= resize(add_cast_20, 44) + resize(add_cast_21, 44);
  sum11 <= add_temp_10(42 DOWNTO 0);

  integrator_delay_section11 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      section_out11 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        section_out11 <= sum11;
      END IF;
    END IF; 
  END PROCESS integrator_delay_section11;

  --   ------------------ Section # 12 : Comb ------------------

  section_in12 <= section_out11;

  sub_cast <= section_in12;
  sub_cast_1 <= diff1;
  sub_temp <= resize(sub_cast, 44) - resize(sub_cast_1, 44);
  section_out12 <= sub_temp(42 DOWNTO 0);

  comb_delay_section12 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      diff1 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_1 = '1' THEN
        diff1 <= section_in12;
      END IF;
    END IF; 
  END PROCESS comb_delay_section12;

  --   ------------------ Section # 13 : Comb ------------------

  section_in13 <= section_out12;

  sub_cast_2 <= section_in13;
  sub_cast_3 <= diff2;
  sub_temp_1 <= resize(sub_cast_2, 44) - resize(sub_cast_3, 44);
  section_out13 <= sub_temp_1(42 DOWNTO 0);

  comb_delay_section13 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      diff2 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_1 = '1' THEN
        diff2 <= section_in13;
      END IF;
    END IF; 
  END PROCESS comb_delay_section13;

  --   ------------------ Section # 14 : Comb ------------------

  section_in14 <= section_out13;

  sub_cast_4 <= section_in14;
  sub_cast_5 <= diff3;
  sub_temp_2 <= resize(sub_cast_4, 44) - resize(sub_cast_5, 44);
  section_out14 <= sub_temp_2(42 DOWNTO 0);

  comb_delay_section14 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      diff3 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_1 = '1' THEN
        diff3 <= section_in14;
      END IF;
    END IF; 
  END PROCESS comb_delay_section14;

  --   ------------------ Section # 15 : Comb ------------------

  section_in15 <= section_out14;

  sub_cast_6 <= section_in15;
  sub_cast_7 <= diff4;
  sub_temp_3 <= resize(sub_cast_6, 44) - resize(sub_cast_7, 44);
  section_out15 <= sub_temp_3(42 DOWNTO 0);

  comb_delay_section15 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      diff4 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_1 = '1' THEN
        diff4 <= section_in15;
      END IF;
    END IF; 
  END PROCESS comb_delay_section15;

  --   ------------------ Section # 16 : Comb ------------------

  section_in16 <= section_out15;

  sub_cast_8 <= section_in16;
  sub_cast_9 <= diff5;
  sub_temp_4 <= resize(sub_cast_8, 44) - resize(sub_cast_9, 44);
  section_out16 <= sub_temp_4(42 DOWNTO 0);

  comb_delay_section16 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      diff5 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_1 = '1' THEN
        diff5 <= section_in16;
      END IF;
    END IF; 
  END PROCESS comb_delay_section16;

  --   ------------------ Section # 17 : Comb ------------------

  section_in17 <= section_out16;

  sub_cast_10 <= section_in17;
  sub_cast_11 <= diff6;
  sub_temp_5 <= resize(sub_cast_10, 44) - resize(sub_cast_11, 44);
  section_out17 <= sub_temp_5(42 DOWNTO 0);

  comb_delay_section17 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      diff6 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_1 = '1' THEN
        diff6 <= section_in17;
      END IF;
    END IF; 
  END PROCESS comb_delay_section17;

  --   ------------------ Section # 18 : Comb ------------------

  section_in18 <= section_out17;

  sub_cast_12 <= section_in18;
  sub_cast_13 <= diff7;
  sub_temp_6 <= resize(sub_cast_12, 44) - resize(sub_cast_13, 44);
  section_out18 <= sub_temp_6(42 DOWNTO 0);

  comb_delay_section18 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      diff7 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_1 = '1' THEN
        diff7 <= section_in18;
      END IF;
    END IF; 
  END PROCESS comb_delay_section18;

  --   ------------------ Section # 19 : Comb ------------------

  section_in19 <= section_out18;

  sub_cast_14 <= section_in19;
  sub_cast_15 <= diff8;
  sub_temp_7 <= resize(sub_cast_14, 44) - resize(sub_cast_15, 44);
  section_out19 <= sub_temp_7(42 DOWNTO 0);

  comb_delay_section19 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      diff8 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_1 = '1' THEN
        diff8 <= section_in19;
      END IF;
    END IF; 
  END PROCESS comb_delay_section19;

  --   ------------------ Section # 20 : Comb ------------------

  section_in20 <= section_out19;

  sub_cast_16 <= section_in20;
  sub_cast_17 <= diff9;
  sub_temp_8 <= resize(sub_cast_16, 44) - resize(sub_cast_17, 44);
  section_out20 <= sub_temp_8(42 DOWNTO 0);

  comb_delay_section20 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      diff9 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_1 = '1' THEN
        diff9 <= section_in20;
      END IF;
    END IF; 
  END PROCESS comb_delay_section20;

  --   ------------------ Section # 21 : Comb ------------------

  section_in21 <= section_out20;

  sub_cast_18 <= section_in21;
  sub_cast_19 <= diff10;
  sub_temp_9 <= resize(sub_cast_18, 44) - resize(sub_cast_19, 44);
  section_out21 <= sub_temp_9(42 DOWNTO 0);

  comb_delay_section21 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      diff10 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_1 = '1' THEN
        diff10 <= section_in21;
      END IF;
    END IF; 
  END PROCESS comb_delay_section21;

  --   ------------------ Section # 22 : Comb ------------------

  section_in22 <= section_out21;

  sub_cast_20 <= section_in22;
  sub_cast_21 <= diff11;
  sub_temp_10 <= resize(sub_cast_20, 44) - resize(sub_cast_21, 44);
  section_out22 <= sub_temp_10(42 DOWNTO 0);

  comb_delay_section22 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      diff11 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_1 = '1' THEN
        diff11 <= section_in22;
      END IF;
    END IF; 
  END PROCESS comb_delay_section22;

  --   ------------------ Output Register ------------------

  output_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      output_register <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_1 = '1' THEN
        output_register <= section_out22;
      END IF;
    END IF; 
  END PROCESS output_reg_process;

  -- Assignment Statements
  ce_out <= ce_out_reg;
  filter_out <= std_logic_vector(output_register);
END rtl;
