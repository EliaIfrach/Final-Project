-- -------------------------------------------------------------
--
-- Module: IQ_Filter
-- Generated by MATLAB(R) 9.10 and Filter Design HDL Coder 3.1.9.
-- Generated on: 2022-08-29 14:14:22
-- -------------------------------------------------------------

-- -------------------------------------------------------------
-- HDL Code Generation Options:
--
-- TargetLanguage: VHDL
-- TargetDirectory: C:\Users\Elia Yfrach\Desktop\Project\Processing_Unit\Filters
-- Name: IQ_Filter
-- TestBenchName: IQ_Filter_tb
-- TestBenchStimulus: step ramp chirp noise 
-- GenerateHDLTestBench: off

-- Filter Specifications:
--
-- Sample Rate        : 50 MHz
-- Response           : CIC Compensator
-- Specification      : Fp,Fst,Ap,Ast
-- Decimation Factor  : 17
-- Multirate Type     : Decimator
-- Differential Delay : 1
-- Passband Ripple    : 1 dB
-- Passband Edge      : 200 kHz
-- Stopband Edge      : 9 MHz
-- Stopband Atten.    : 40 dB
-- Number of Sections : 2
-- -------------------------------------------------------------

-- -------------------------------------------------------------
-- HDL Implementation    : Fully parallel
-- Folding Factor        : 1
-- -------------------------------------------------------------
-- Filter Settings:
--
-- Discrete-Time FIR Multirate Filter (real)
-- -----------------------------------------
-- Filter Structure   : Direct-Form FIR Polyphase Decimator
-- Decimation Factor  : 17
-- Polyphase Length   : 1
-- Filter Length      : 10
-- Stable             : Yes
-- Linear Phase       : Yes (Type 2)
--
-- Arithmetic         : fixed
-- Numerator          : s16,17 -> [-2.500000e-01 2.500000e-01)
-- -------------------------------------------------------------



LIBRARY IEEE;
USE IEEE.std_logic_1164.all;
USE IEEE.numeric_std.ALL;

ENTITY IQ_Filter IS
   PORT( clk                             :   IN    std_logic; 
         clk_enable                      :   IN    std_logic; 
         reset                           :   IN    std_logic; 
         filter_in                       :   IN    std_logic_vector(27 DOWNTO 0); -- sfix28
         filter_out                      :   OUT   std_logic_vector(43 DOWNTO 0); -- sfix44_En17
         ce_out                          :   OUT   std_logic  
         );

END IQ_Filter;


----------------------------------------------------------------
--Module Architecture: IQ_Filter
----------------------------------------------------------------
ARCHITECTURE rtl OF IQ_Filter IS
  -- Local Functions
  -- Type Definitions
  TYPE input_pipeline_type IS ARRAY (NATURAL range <>) OF signed(27 DOWNTO 0); -- sfix28
  -- Constants
  CONSTANT coeffphase1_1                  : signed(15 DOWNTO 0) := to_signed(2623, 16); -- sfix16_En17
  CONSTANT coeffphase2_1                  : signed(15 DOWNTO 0) := to_signed(6777, 16); -- sfix16_En17
  CONSTANT coeffphase3_1                  : signed(15 DOWNTO 0) := to_signed(12612, 16); -- sfix16_En17
  CONSTANT coeffphase4_1                  : signed(15 DOWNTO 0) := to_signed(18365, 16); -- sfix16_En17
  CONSTANT coeffphase5_1                  : signed(15 DOWNTO 0) := to_signed(21960, 16); -- sfix16_En17
  CONSTANT coeffphase6_1                  : signed(15 DOWNTO 0) := to_signed(21960, 16); -- sfix16_En17
  CONSTANT coeffphase7_1                  : signed(15 DOWNTO 0) := to_signed(18365, 16); -- sfix16_En17
  CONSTANT coeffphase8_1                  : signed(15 DOWNTO 0) := to_signed(12612, 16); -- sfix16_En17
  CONSTANT coeffphase9_1                  : signed(15 DOWNTO 0) := to_signed(6777, 16); -- sfix16_En17
  CONSTANT coeffphase10_1                 : signed(15 DOWNTO 0) := to_signed(2623, 16); -- sfix16_En17
  CONSTANT coeffphase11_1                 : signed(15 DOWNTO 0) := to_signed(0, 16); -- sfix16_En17
  CONSTANT coeffphase12_1                 : signed(15 DOWNTO 0) := to_signed(0, 16); -- sfix16_En17
  CONSTANT coeffphase13_1                 : signed(15 DOWNTO 0) := to_signed(0, 16); -- sfix16_En17
  CONSTANT coeffphase14_1                 : signed(15 DOWNTO 0) := to_signed(0, 16); -- sfix16_En17
  CONSTANT coeffphase15_1                 : signed(15 DOWNTO 0) := to_signed(0, 16); -- sfix16_En17
  CONSTANT coeffphase16_1                 : signed(15 DOWNTO 0) := to_signed(0, 16); -- sfix16_En17
  CONSTANT coeffphase17_1                 : signed(15 DOWNTO 0) := to_signed(0, 16); -- sfix16_En17

  -- Signals
  SIGNAL ring_count                       : unsigned(16 DOWNTO 0); -- ufix17
  SIGNAL phase_0                          : std_logic; -- boolean
  SIGNAL phase_1                          : std_logic; -- boolean
  SIGNAL phase_2                          : std_logic; -- boolean
  SIGNAL phase_3                          : std_logic; -- boolean
  SIGNAL phase_4                          : std_logic; -- boolean
  SIGNAL phase_5                          : std_logic; -- boolean
  SIGNAL phase_6                          : std_logic; -- boolean
  SIGNAL phase_7                          : std_logic; -- boolean
  SIGNAL phase_8                          : std_logic; -- boolean
  SIGNAL phase_9                          : std_logic; -- boolean
  SIGNAL phase_10                         : std_logic; -- boolean
  SIGNAL phase_11                         : std_logic; -- boolean
  SIGNAL phase_12                         : std_logic; -- boolean
  SIGNAL phase_13                         : std_logic; -- boolean
  SIGNAL phase_14                         : std_logic; -- boolean
  SIGNAL phase_15                         : std_logic; -- boolean
  SIGNAL phase_16                         : std_logic; -- boolean
  SIGNAL ce_out_reg                       : std_logic; -- boolean
  SIGNAL input_register                   : signed(27 DOWNTO 0); -- sfix28
  SIGNAL input_pipeline_phase1            : signed(27 DOWNTO 0); -- sfix28
  SIGNAL input_pipeline_phase2            : signed(27 DOWNTO 0); -- sfix28
  SIGNAL input_pipeline_phase3            : signed(27 DOWNTO 0); -- sfix28
  SIGNAL input_pipeline_phase4            : signed(27 DOWNTO 0); -- sfix28
  SIGNAL input_pipeline_phase5            : signed(27 DOWNTO 0); -- sfix28
  SIGNAL input_pipeline_phase6            : signed(27 DOWNTO 0); -- sfix28
  SIGNAL input_pipeline_phase7            : signed(27 DOWNTO 0); -- sfix28
  SIGNAL input_pipeline_phase8            : signed(27 DOWNTO 0); -- sfix28
  SIGNAL input_pipeline_phase9            : signed(27 DOWNTO 0); -- sfix28
  SIGNAL product_phase0_1                 : signed(43 DOWNTO 0); -- sfix44_En17
  SIGNAL product_phase1_1                 : signed(43 DOWNTO 0); -- sfix44_En17
  SIGNAL product_phase2_1                 : signed(43 DOWNTO 0); -- sfix44_En17
  SIGNAL product_phase3_1                 : signed(43 DOWNTO 0); -- sfix44_En17
  SIGNAL product_phase4_1                 : signed(43 DOWNTO 0); -- sfix44_En17
  SIGNAL product_phase5_1                 : signed(43 DOWNTO 0); -- sfix44_En17
  SIGNAL product_phase6_1                 : signed(43 DOWNTO 0); -- sfix44_En17
  SIGNAL product_phase7_1                 : signed(43 DOWNTO 0); -- sfix44_En17
  SIGNAL product_phase8_1                 : signed(43 DOWNTO 0); -- sfix44_En17
  SIGNAL product_phase9_1                 : signed(43 DOWNTO 0); -- sfix44_En17
  SIGNAL quantized_sum                    : signed(43 DOWNTO 0); -- sfix44_En17
  SIGNAL sum1                             : signed(43 DOWNTO 0); -- sfix44_En17
  SIGNAL add_temp                         : signed(44 DOWNTO 0); -- sfix45_En17
  SIGNAL sum2                             : signed(43 DOWNTO 0); -- sfix44_En17
  SIGNAL add_temp_1                       : signed(44 DOWNTO 0); -- sfix45_En17
  SIGNAL sum3                             : signed(43 DOWNTO 0); -- sfix44_En17
  SIGNAL add_temp_2                       : signed(44 DOWNTO 0); -- sfix45_En17
  SIGNAL sum4                             : signed(43 DOWNTO 0); -- sfix44_En17
  SIGNAL add_temp_3                       : signed(44 DOWNTO 0); -- sfix45_En17
  SIGNAL sum5                             : signed(43 DOWNTO 0); -- sfix44_En17
  SIGNAL add_temp_4                       : signed(44 DOWNTO 0); -- sfix45_En17
  SIGNAL sum6                             : signed(43 DOWNTO 0); -- sfix44_En17
  SIGNAL add_temp_5                       : signed(44 DOWNTO 0); -- sfix45_En17
  SIGNAL sum7                             : signed(43 DOWNTO 0); -- sfix44_En17
  SIGNAL add_temp_6                       : signed(44 DOWNTO 0); -- sfix45_En17
  SIGNAL sum8                             : signed(43 DOWNTO 0); -- sfix44_En17
  SIGNAL add_temp_7                       : signed(44 DOWNTO 0); -- sfix45_En17
  SIGNAL sum9                             : signed(43 DOWNTO 0); -- sfix44_En17
  SIGNAL add_temp_8                       : signed(44 DOWNTO 0); -- sfix45_En17
  SIGNAL output_typeconvert               : signed(43 DOWNTO 0); -- sfix44_En17
  SIGNAL output_register                  : signed(43 DOWNTO 0); -- sfix44_En17


BEGIN

  -- Block Statements
  ce_output : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      ring_count <= to_unsigned(1, 17);
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        ring_count <= ring_count(0) & ring_count(16 DOWNTO 1);
      END IF;
    END IF; 
  END PROCESS ce_output;

  phase_0 <= ring_count(0)  AND clk_enable;

  phase_1 <= ring_count(1)  AND clk_enable;

  phase_2 <= ring_count(2)  AND clk_enable;

  phase_3 <= ring_count(3)  AND clk_enable;

  phase_4 <= ring_count(4)  AND clk_enable;

  phase_5 <= ring_count(5)  AND clk_enable;

  phase_6 <= ring_count(6)  AND clk_enable;

  phase_7 <= ring_count(7)  AND clk_enable;

  phase_8 <= ring_count(8)  AND clk_enable;

  phase_9 <= ring_count(9)  AND clk_enable;

  phase_10 <= ring_count(10)  AND clk_enable;

  phase_11 <= ring_count(11)  AND clk_enable;

  phase_12 <= ring_count(12)  AND clk_enable;

  phase_13 <= ring_count(13)  AND clk_enable;

  phase_14 <= ring_count(14)  AND clk_enable;

  phase_15 <= ring_count(15)  AND clk_enable;

  phase_16 <= ring_count(16)  AND clk_enable;

  --   ------------------ CE Output Register ------------------

  ce_output_register : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      ce_out_reg <= '0';
    ELSIF clk'event AND clk = '1' THEN
      ce_out_reg <= phase_16;
      
    END IF; 
  END PROCESS ce_output_register;

  input_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      input_register <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        input_register <= signed(filter_in);
      END IF;
    END IF; 
  END PROCESS input_reg_process;

  Delay_Pipeline_Phase1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      input_pipeline_phase1 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_0 = '1' THEN
        input_pipeline_phase1 <= input_register;
      END IF;
    END IF; 
  END PROCESS Delay_Pipeline_Phase1_process;

  Delay_Pipeline_Phase2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      input_pipeline_phase2 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_1 = '1' THEN
        input_pipeline_phase2 <= input_register;
      END IF;
    END IF; 
  END PROCESS Delay_Pipeline_Phase2_process;

  Delay_Pipeline_Phase3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      input_pipeline_phase3 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_2 = '1' THEN
        input_pipeline_phase3 <= input_register;
      END IF;
    END IF; 
  END PROCESS Delay_Pipeline_Phase3_process;

  Delay_Pipeline_Phase4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      input_pipeline_phase4 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_3 = '1' THEN
        input_pipeline_phase4 <= input_register;
      END IF;
    END IF; 
  END PROCESS Delay_Pipeline_Phase4_process;

  Delay_Pipeline_Phase5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      input_pipeline_phase5 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_4 = '1' THEN
        input_pipeline_phase5 <= input_register;
      END IF;
    END IF; 
  END PROCESS Delay_Pipeline_Phase5_process;

  Delay_Pipeline_Phase6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      input_pipeline_phase6 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_5 = '1' THEN
        input_pipeline_phase6 <= input_register;
      END IF;
    END IF; 
  END PROCESS Delay_Pipeline_Phase6_process;

  Delay_Pipeline_Phase7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      input_pipeline_phase7 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_6 = '1' THEN
        input_pipeline_phase7 <= input_register;
      END IF;
    END IF; 
  END PROCESS Delay_Pipeline_Phase7_process;

  Delay_Pipeline_Phase8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      input_pipeline_phase8 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_7 = '1' THEN
        input_pipeline_phase8 <= input_register;
      END IF;
    END IF; 
  END PROCESS Delay_Pipeline_Phase8_process;

  Delay_Pipeline_Phase9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      input_pipeline_phase9 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_8 = '1' THEN
        input_pipeline_phase9 <= input_register;
      END IF;
    END IF; 
  END PROCESS Delay_Pipeline_Phase9_process;

  product_phase0_1 <= input_register * coeffphase1_1;

  product_phase1_1 <= input_pipeline_phase1 * coeffphase2_1;

  product_phase2_1 <= input_pipeline_phase2 * coeffphase3_1;

  product_phase3_1 <= input_pipeline_phase3 * coeffphase4_1;

  product_phase4_1 <= input_pipeline_phase4 * coeffphase5_1;

  product_phase5_1 <= input_pipeline_phase5 * coeffphase6_1;

  product_phase6_1 <= input_pipeline_phase6 * coeffphase7_1;

  product_phase7_1 <= input_pipeline_phase7 * coeffphase8_1;

  product_phase8_1 <= input_pipeline_phase8 * coeffphase9_1;

  product_phase9_1 <= input_pipeline_phase9 * coeffphase10_1;

  quantized_sum <= product_phase9_1;

  add_temp <= resize(quantized_sum, 45) + resize(product_phase8_1, 45);
  sum1 <= add_temp(43 DOWNTO 0);

  add_temp_1 <= resize(sum1, 45) + resize(product_phase7_1, 45);
  sum2 <= add_temp_1(43 DOWNTO 0);

  add_temp_2 <= resize(sum2, 45) + resize(product_phase6_1, 45);
  sum3 <= add_temp_2(43 DOWNTO 0);

  add_temp_3 <= resize(sum3, 45) + resize(product_phase5_1, 45);
  sum4 <= add_temp_3(43 DOWNTO 0);

  add_temp_4 <= resize(sum4, 45) + resize(product_phase4_1, 45);
  sum5 <= add_temp_4(43 DOWNTO 0);

  add_temp_5 <= resize(sum5, 45) + resize(product_phase3_1, 45);
  sum6 <= add_temp_5(43 DOWNTO 0);

  add_temp_6 <= resize(sum6, 45) + resize(product_phase2_1, 45);
  sum7 <= add_temp_6(43 DOWNTO 0);

  add_temp_7 <= resize(sum7, 45) + resize(product_phase1_1, 45);
  sum8 <= add_temp_7(43 DOWNTO 0);

  add_temp_8 <= resize(sum8, 45) + resize(product_phase0_1, 45);
  sum9 <= add_temp_8(43 DOWNTO 0);

  output_typeconvert <= sum9;

  output_register_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      output_register <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_16 = '1' THEN
        output_register <= output_typeconvert;
      END IF;
    END IF; 
  END PROCESS output_register_process;

  -- Assignment Statements
  ce_out <= ce_out_reg;
  filter_out <= std_logic_vector(output_register);
END rtl;
