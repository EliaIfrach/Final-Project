-- -------------------------------------------------------------
--
-- Module: CIC1_V3
-- Generated by MATLAB(R) 9.10 and Filter Design HDL Coder 3.1.9.
-- Generated on: 2022-12-20 17:43:39
-- -------------------------------------------------------------

-- -------------------------------------------------------------
-- HDL Code Generation Options:
--
-- TargetLanguage: VHDL
-- TargetDirectory: C:\Users\Elia Yfrach\Desktop\Project\Processing_Unit\Filters
-- Name: CIC1_V3
-- TestBenchName: CIC1_V3_tb
-- TestBenchStimulus: step ramp chirp noise 
-- GenerateHDLTestBench: off

-- Filter Specifications:
--
-- Sample Rate        : 367.647 kHz
-- Response           : CIC Compensator
-- Specification      : Fp,Fst,Ap,Ast
-- Decimation Factor  : 8
-- Multirate Type     : Decimator
-- Stopband Atten.    : 40 dB
-- Differential Delay : 1
-- Number of Sections : 4
-- Passband Ripple    : 1 dB
-- Stopband Edge      : 30 kHz
-- Passband Edge      : 10 kHz
-- -------------------------------------------------------------

-- -------------------------------------------------------------
-- HDL Implementation    : Fully parallel
-- Folding Factor        : 1
-- -------------------------------------------------------------
-- Filter Settings:
--
-- Discrete-Time FIR Multirate Filter (real)
-- -----------------------------------------
-- Filter Structure   : Direct-Form FIR Polyphase Decimator
-- Decimation Factor  : 8
-- Polyphase Length   : 5
-- Filter Length      : 33
-- Stable             : Yes
-- Linear Phase       : Yes (Type 1)
--
-- Arithmetic         : fixed
-- Numerator          : s16,18 -> [-1.250000e-01 1.250000e-01)
-- -------------------------------------------------------------



LIBRARY IEEE;
USE IEEE.std_logic_1164.all;
USE IEEE.numeric_std.ALL;

ENTITY CIC1_V3 IS
   PORT( clk                             :   IN    std_logic; 
         clk_enable                      :   IN    std_logic; 
         reset                           :   IN    std_logic; 
         filter_in                       :   IN    std_logic_vector(27 DOWNTO 0); -- sfix28
         filter_out                      :   OUT   std_logic_vector(46 DOWNTO 0); -- sfix47_En18
         ce_out                          :   OUT   std_logic  
         );

END CIC1_V3;


----------------------------------------------------------------
--Module Architecture: CIC1_V3
----------------------------------------------------------------
ARCHITECTURE rtl OF CIC1_V3 IS
  -- Local Functions
  -- Type Definitions
  TYPE input_pipeline_type IS ARRAY (NATURAL range <>) OF signed(27 DOWNTO 0); -- sfix28
  -- Constants
  CONSTANT coeffphase1_1                  : signed(15 DOWNTO 0) := to_signed(-1819, 16); -- sfix16_En18
  CONSTANT coeffphase1_2                  : signed(15 DOWNTO 0) := to_signed(4688, 16); -- sfix16_En18
  CONSTANT coeffphase1_3                  : signed(15 DOWNTO 0) := to_signed(27255, 16); -- sfix16_En18
  CONSTANT coeffphase1_4                  : signed(15 DOWNTO 0) := to_signed(4688, 16); -- sfix16_En18
  CONSTANT coeffphase1_5                  : signed(15 DOWNTO 0) := to_signed(-1819, 16); -- sfix16_En18
  CONSTANT coeffphase2_1                  : signed(15 DOWNTO 0) := to_signed(-1618, 16); -- sfix16_En18
  CONSTANT coeffphase2_2                  : signed(15 DOWNTO 0) := to_signed(7947, 16); -- sfix16_En18
  CONSTANT coeffphase2_3                  : signed(15 DOWNTO 0) := to_signed(26686, 16); -- sfix16_En18
  CONSTANT coeffphase2_4                  : signed(15 DOWNTO 0) := to_signed(2007, 16); -- sfix16_En18
  CONSTANT coeffphase2_5                  : signed(15 DOWNTO 0) := to_signed(0, 16); -- sfix16_En18
  CONSTANT coeffphase3_1                  : signed(15 DOWNTO 0) := to_signed(-2032, 16); -- sfix16_En18
  CONSTANT coeffphase3_2                  : signed(15 DOWNTO 0) := to_signed(11611, 16); -- sfix16_En18
  CONSTANT coeffphase3_3                  : signed(15 DOWNTO 0) := to_signed(25033, 16); -- sfix16_En18
  CONSTANT coeffphase3_4                  : signed(15 DOWNTO 0) := to_signed(-3, 16); -- sfix16_En18
  CONSTANT coeffphase3_5                  : signed(15 DOWNTO 0) := to_signed(0, 16); -- sfix16_En18
  CONSTANT coeffphase4_1                  : signed(15 DOWNTO 0) := to_signed(-2221, 16); -- sfix16_En18
  CONSTANT coeffphase4_2                  : signed(15 DOWNTO 0) := to_signed(15442, 16); -- sfix16_En18
  CONSTANT coeffphase4_3                  : signed(15 DOWNTO 0) := to_signed(22444, 16); -- sfix16_En18
  CONSTANT coeffphase4_4                  : signed(15 DOWNTO 0) := to_signed(-1331, 16); -- sfix16_En18
  CONSTANT coeffphase4_5                  : signed(15 DOWNTO 0) := to_signed(0, 16); -- sfix16_En18
  CONSTANT coeffphase5_1                  : signed(15 DOWNTO 0) := to_signed(-2034, 16); -- sfix16_En18
  CONSTANT coeffphase5_2                  : signed(15 DOWNTO 0) := to_signed(19153, 16); -- sfix16_En18
  CONSTANT coeffphase5_3                  : signed(15 DOWNTO 0) := to_signed(19153, 16); -- sfix16_En18
  CONSTANT coeffphase5_4                  : signed(15 DOWNTO 0) := to_signed(-2034, 16); -- sfix16_En18
  CONSTANT coeffphase5_5                  : signed(15 DOWNTO 0) := to_signed(0, 16); -- sfix16_En18
  CONSTANT coeffphase6_1                  : signed(15 DOWNTO 0) := to_signed(-1331, 16); -- sfix16_En18
  CONSTANT coeffphase6_2                  : signed(15 DOWNTO 0) := to_signed(22444, 16); -- sfix16_En18
  CONSTANT coeffphase6_3                  : signed(15 DOWNTO 0) := to_signed(15442, 16); -- sfix16_En18
  CONSTANT coeffphase6_4                  : signed(15 DOWNTO 0) := to_signed(-2221, 16); -- sfix16_En18
  CONSTANT coeffphase6_5                  : signed(15 DOWNTO 0) := to_signed(0, 16); -- sfix16_En18
  CONSTANT coeffphase7_1                  : signed(15 DOWNTO 0) := to_signed(-3, 16); -- sfix16_En18
  CONSTANT coeffphase7_2                  : signed(15 DOWNTO 0) := to_signed(25033, 16); -- sfix16_En18
  CONSTANT coeffphase7_3                  : signed(15 DOWNTO 0) := to_signed(11611, 16); -- sfix16_En18
  CONSTANT coeffphase7_4                  : signed(15 DOWNTO 0) := to_signed(-2032, 16); -- sfix16_En18
  CONSTANT coeffphase7_5                  : signed(15 DOWNTO 0) := to_signed(0, 16); -- sfix16_En18
  CONSTANT coeffphase8_1                  : signed(15 DOWNTO 0) := to_signed(2007, 16); -- sfix16_En18
  CONSTANT coeffphase8_2                  : signed(15 DOWNTO 0) := to_signed(26686, 16); -- sfix16_En18
  CONSTANT coeffphase8_3                  : signed(15 DOWNTO 0) := to_signed(7947, 16); -- sfix16_En18
  CONSTANT coeffphase8_4                  : signed(15 DOWNTO 0) := to_signed(-1618, 16); -- sfix16_En18
  CONSTANT coeffphase8_5                  : signed(15 DOWNTO 0) := to_signed(0, 16); -- sfix16_En18

  -- Signals
  SIGNAL ring_count                       : unsigned(7 DOWNTO 0); -- ufix8
  SIGNAL phase_0                          : std_logic; -- boolean
  SIGNAL phase_1                          : std_logic; -- boolean
  SIGNAL phase_2                          : std_logic; -- boolean
  SIGNAL phase_3                          : std_logic; -- boolean
  SIGNAL phase_4                          : std_logic; -- boolean
  SIGNAL phase_5                          : std_logic; -- boolean
  SIGNAL phase_6                          : std_logic; -- boolean
  SIGNAL phase_7                          : std_logic; -- boolean
  SIGNAL ce_out_reg                       : std_logic; -- boolean
  SIGNAL input_register                   : signed(27 DOWNTO 0); -- sfix28
  SIGNAL input_pipeline_phase0            : input_pipeline_type(0 TO 3); -- sfix28
  SIGNAL input_pipeline_phase1            : input_pipeline_type(0 TO 3); -- sfix28
  SIGNAL input_pipeline_phase2            : input_pipeline_type(0 TO 3); -- sfix28
  SIGNAL input_pipeline_phase3            : input_pipeline_type(0 TO 3); -- sfix28
  SIGNAL input_pipeline_phase4            : input_pipeline_type(0 TO 3); -- sfix28
  SIGNAL input_pipeline_phase5            : input_pipeline_type(0 TO 3); -- sfix28
  SIGNAL input_pipeline_phase6            : input_pipeline_type(0 TO 3); -- sfix28
  SIGNAL input_pipeline_phase7            : input_pipeline_type(0 TO 3); -- sfix28
  SIGNAL product_phase0_1                 : signed(43 DOWNTO 0); -- sfix44_En18
  SIGNAL product_phase0_2                 : signed(43 DOWNTO 0); -- sfix44_En18
  SIGNAL product_phase0_3                 : signed(43 DOWNTO 0); -- sfix44_En18
  SIGNAL product_phase0_4                 : signed(43 DOWNTO 0); -- sfix44_En18
  SIGNAL product_phase0_5                 : signed(43 DOWNTO 0); -- sfix44_En18
  SIGNAL product_phase1_1                 : signed(43 DOWNTO 0); -- sfix44_En18
  SIGNAL product_phase1_2                 : signed(43 DOWNTO 0); -- sfix44_En18
  SIGNAL product_phase1_3                 : signed(43 DOWNTO 0); -- sfix44_En18
  SIGNAL product_phase1_4                 : signed(43 DOWNTO 0); -- sfix44_En18
  SIGNAL product_phase2_1                 : signed(43 DOWNTO 0); -- sfix44_En18
  SIGNAL product_phase2_2                 : signed(43 DOWNTO 0); -- sfix44_En18
  SIGNAL product_phase2_3                 : signed(43 DOWNTO 0); -- sfix44_En18
  SIGNAL product_phase2_4                 : signed(43 DOWNTO 0); -- sfix44_En18
  SIGNAL product_phase3_1                 : signed(43 DOWNTO 0); -- sfix44_En18
  SIGNAL product_phase3_2                 : signed(43 DOWNTO 0); -- sfix44_En18
  SIGNAL product_phase3_3                 : signed(43 DOWNTO 0); -- sfix44_En18
  SIGNAL product_phase3_4                 : signed(43 DOWNTO 0); -- sfix44_En18
  SIGNAL product_phase4_1                 : signed(43 DOWNTO 0); -- sfix44_En18
  SIGNAL product_phase4_2                 : signed(43 DOWNTO 0); -- sfix44_En18
  SIGNAL product_phase4_3                 : signed(43 DOWNTO 0); -- sfix44_En18
  SIGNAL product_phase4_4                 : signed(43 DOWNTO 0); -- sfix44_En18
  SIGNAL product_phase5_1                 : signed(43 DOWNTO 0); -- sfix44_En18
  SIGNAL product_phase5_2                 : signed(43 DOWNTO 0); -- sfix44_En18
  SIGNAL product_phase5_3                 : signed(43 DOWNTO 0); -- sfix44_En18
  SIGNAL product_phase5_4                 : signed(43 DOWNTO 0); -- sfix44_En18
  SIGNAL product_phase6_1                 : signed(43 DOWNTO 0); -- sfix44_En18
  SIGNAL product_phase6_2                 : signed(43 DOWNTO 0); -- sfix44_En18
  SIGNAL product_phase6_3                 : signed(43 DOWNTO 0); -- sfix44_En18
  SIGNAL product_phase6_4                 : signed(43 DOWNTO 0); -- sfix44_En18
  SIGNAL product_phase7_1                 : signed(43 DOWNTO 0); -- sfix44_En18
  SIGNAL product_phase7_2                 : signed(43 DOWNTO 0); -- sfix44_En18
  SIGNAL product_phase7_3                 : signed(43 DOWNTO 0); -- sfix44_En18
  SIGNAL product_phase7_4                 : signed(43 DOWNTO 0); -- sfix44_En18
  SIGNAL quantized_sum                    : signed(46 DOWNTO 0); -- sfix47_En18
  SIGNAL sum1                             : signed(46 DOWNTO 0); -- sfix47_En18
  SIGNAL add_temp                         : signed(47 DOWNTO 0); -- sfix48_En18
  SIGNAL sum2                             : signed(46 DOWNTO 0); -- sfix47_En18
  SIGNAL add_temp_1                       : signed(47 DOWNTO 0); -- sfix48_En18
  SIGNAL sum3                             : signed(46 DOWNTO 0); -- sfix47_En18
  SIGNAL add_temp_2                       : signed(47 DOWNTO 0); -- sfix48_En18
  SIGNAL sum4                             : signed(46 DOWNTO 0); -- sfix47_En18
  SIGNAL add_temp_3                       : signed(47 DOWNTO 0); -- sfix48_En18
  SIGNAL sum5                             : signed(46 DOWNTO 0); -- sfix47_En18
  SIGNAL add_temp_4                       : signed(47 DOWNTO 0); -- sfix48_En18
  SIGNAL sum6                             : signed(46 DOWNTO 0); -- sfix47_En18
  SIGNAL add_temp_5                       : signed(47 DOWNTO 0); -- sfix48_En18
  SIGNAL sum7                             : signed(46 DOWNTO 0); -- sfix47_En18
  SIGNAL add_temp_6                       : signed(47 DOWNTO 0); -- sfix48_En18
  SIGNAL sum8                             : signed(46 DOWNTO 0); -- sfix47_En18
  SIGNAL add_temp_7                       : signed(47 DOWNTO 0); -- sfix48_En18
  SIGNAL sum9                             : signed(46 DOWNTO 0); -- sfix47_En18
  SIGNAL add_temp_8                       : signed(47 DOWNTO 0); -- sfix48_En18
  SIGNAL sum10                            : signed(46 DOWNTO 0); -- sfix47_En18
  SIGNAL add_temp_9                       : signed(47 DOWNTO 0); -- sfix48_En18
  SIGNAL sum11                            : signed(46 DOWNTO 0); -- sfix47_En18
  SIGNAL add_temp_10                      : signed(47 DOWNTO 0); -- sfix48_En18
  SIGNAL sum12                            : signed(46 DOWNTO 0); -- sfix47_En18
  SIGNAL add_temp_11                      : signed(47 DOWNTO 0); -- sfix48_En18
  SIGNAL sum13                            : signed(46 DOWNTO 0); -- sfix47_En18
  SIGNAL add_temp_12                      : signed(47 DOWNTO 0); -- sfix48_En18
  SIGNAL sum14                            : signed(46 DOWNTO 0); -- sfix47_En18
  SIGNAL add_temp_13                      : signed(47 DOWNTO 0); -- sfix48_En18
  SIGNAL sum15                            : signed(46 DOWNTO 0); -- sfix47_En18
  SIGNAL add_temp_14                      : signed(47 DOWNTO 0); -- sfix48_En18
  SIGNAL sum16                            : signed(46 DOWNTO 0); -- sfix47_En18
  SIGNAL add_temp_15                      : signed(47 DOWNTO 0); -- sfix48_En18
  SIGNAL sum17                            : signed(46 DOWNTO 0); -- sfix47_En18
  SIGNAL add_temp_16                      : signed(47 DOWNTO 0); -- sfix48_En18
  SIGNAL sum18                            : signed(46 DOWNTO 0); -- sfix47_En18
  SIGNAL add_temp_17                      : signed(47 DOWNTO 0); -- sfix48_En18
  SIGNAL sum19                            : signed(46 DOWNTO 0); -- sfix47_En18
  SIGNAL add_temp_18                      : signed(47 DOWNTO 0); -- sfix48_En18
  SIGNAL sum20                            : signed(46 DOWNTO 0); -- sfix47_En18
  SIGNAL add_temp_19                      : signed(47 DOWNTO 0); -- sfix48_En18
  SIGNAL sum21                            : signed(46 DOWNTO 0); -- sfix47_En18
  SIGNAL add_temp_20                      : signed(47 DOWNTO 0); -- sfix48_En18
  SIGNAL sum22                            : signed(46 DOWNTO 0); -- sfix47_En18
  SIGNAL add_temp_21                      : signed(47 DOWNTO 0); -- sfix48_En18
  SIGNAL sum23                            : signed(46 DOWNTO 0); -- sfix47_En18
  SIGNAL add_temp_22                      : signed(47 DOWNTO 0); -- sfix48_En18
  SIGNAL sum24                            : signed(46 DOWNTO 0); -- sfix47_En18
  SIGNAL add_temp_23                      : signed(47 DOWNTO 0); -- sfix48_En18
  SIGNAL sum25                            : signed(46 DOWNTO 0); -- sfix47_En18
  SIGNAL add_temp_24                      : signed(47 DOWNTO 0); -- sfix48_En18
  SIGNAL sum26                            : signed(46 DOWNTO 0); -- sfix47_En18
  SIGNAL add_temp_25                      : signed(47 DOWNTO 0); -- sfix48_En18
  SIGNAL sum27                            : signed(46 DOWNTO 0); -- sfix47_En18
  SIGNAL add_temp_26                      : signed(47 DOWNTO 0); -- sfix48_En18
  SIGNAL sum28                            : signed(46 DOWNTO 0); -- sfix47_En18
  SIGNAL add_temp_27                      : signed(47 DOWNTO 0); -- sfix48_En18
  SIGNAL sum29                            : signed(46 DOWNTO 0); -- sfix47_En18
  SIGNAL add_temp_28                      : signed(47 DOWNTO 0); -- sfix48_En18
  SIGNAL sum30                            : signed(46 DOWNTO 0); -- sfix47_En18
  SIGNAL add_temp_29                      : signed(47 DOWNTO 0); -- sfix48_En18
  SIGNAL sum31                            : signed(46 DOWNTO 0); -- sfix47_En18
  SIGNAL add_temp_30                      : signed(47 DOWNTO 0); -- sfix48_En18
  SIGNAL sum32                            : signed(46 DOWNTO 0); -- sfix47_En18
  SIGNAL add_temp_31                      : signed(47 DOWNTO 0); -- sfix48_En18
  SIGNAL output_typeconvert               : signed(46 DOWNTO 0); -- sfix47_En18
  SIGNAL output_register                  : signed(46 DOWNTO 0); -- sfix47_En18


BEGIN

  -- Block Statements
  ce_output : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      ring_count <= to_unsigned(1, 8);
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        ring_count <= ring_count(0) & ring_count(7 DOWNTO 1);
      END IF;
    END IF; 
  END PROCESS ce_output;

  phase_0 <= ring_count(0)  AND clk_enable;

  phase_1 <= ring_count(1)  AND clk_enable;

  phase_2 <= ring_count(2)  AND clk_enable;

  phase_3 <= ring_count(3)  AND clk_enable;

  phase_4 <= ring_count(4)  AND clk_enable;

  phase_5 <= ring_count(5)  AND clk_enable;

  phase_6 <= ring_count(6)  AND clk_enable;

  phase_7 <= ring_count(7)  AND clk_enable;

  --   ------------------ CE Output Register ------------------

  ce_output_register : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      ce_out_reg <= '0';
    ELSIF clk'event AND clk = '1' THEN
      ce_out_reg <= phase_7;
      
    END IF; 
  END PROCESS ce_output_register;

  input_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      input_register <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        input_register <= signed(filter_in);
      END IF;
    END IF; 
  END PROCESS input_reg_process;

  Delay_Pipeline_Phase0_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      input_pipeline_phase0(0 TO 3) <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF phase_7 = '1' THEN
        input_pipeline_phase0(0) <= input_register;
        input_pipeline_phase0(1 TO 3) <= input_pipeline_phase0(0 TO 2);
      END IF;
    END IF; 
  END PROCESS Delay_Pipeline_Phase0_process;

  Delay_Pipeline_Phase1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      input_pipeline_phase1(0 TO 3) <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF phase_0 = '1' THEN
        input_pipeline_phase1(0) <= input_register;
        input_pipeline_phase1(1 TO 3) <= input_pipeline_phase1(0 TO 2);
      END IF;
    END IF; 
  END PROCESS Delay_Pipeline_Phase1_process;

  Delay_Pipeline_Phase2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      input_pipeline_phase2(0 TO 3) <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF phase_1 = '1' THEN
        input_pipeline_phase2(0) <= input_register;
        input_pipeline_phase2(1 TO 3) <= input_pipeline_phase2(0 TO 2);
      END IF;
    END IF; 
  END PROCESS Delay_Pipeline_Phase2_process;

  Delay_Pipeline_Phase3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      input_pipeline_phase3(0 TO 3) <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF phase_2 = '1' THEN
        input_pipeline_phase3(0) <= input_register;
        input_pipeline_phase3(1 TO 3) <= input_pipeline_phase3(0 TO 2);
      END IF;
    END IF; 
  END PROCESS Delay_Pipeline_Phase3_process;

  Delay_Pipeline_Phase4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      input_pipeline_phase4(0 TO 3) <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF phase_3 = '1' THEN
        input_pipeline_phase4(0) <= input_register;
        input_pipeline_phase4(1 TO 3) <= input_pipeline_phase4(0 TO 2);
      END IF;
    END IF; 
  END PROCESS Delay_Pipeline_Phase4_process;

  Delay_Pipeline_Phase5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      input_pipeline_phase5(0 TO 3) <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF phase_4 = '1' THEN
        input_pipeline_phase5(0) <= input_register;
        input_pipeline_phase5(1 TO 3) <= input_pipeline_phase5(0 TO 2);
      END IF;
    END IF; 
  END PROCESS Delay_Pipeline_Phase5_process;

  Delay_Pipeline_Phase6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      input_pipeline_phase6(0 TO 3) <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF phase_5 = '1' THEN
        input_pipeline_phase6(0) <= input_register;
        input_pipeline_phase6(1 TO 3) <= input_pipeline_phase6(0 TO 2);
      END IF;
    END IF; 
  END PROCESS Delay_Pipeline_Phase6_process;

  Delay_Pipeline_Phase7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      input_pipeline_phase7(0 TO 3) <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF phase_6 = '1' THEN
        input_pipeline_phase7(0) <= input_register;
        input_pipeline_phase7(1 TO 3) <= input_pipeline_phase7(0 TO 2);
      END IF;
    END IF; 
  END PROCESS Delay_Pipeline_Phase7_process;

  product_phase0_1 <= input_register * coeffphase1_1;

  product_phase0_2 <= input_pipeline_phase0(0) * coeffphase1_2;

  product_phase0_3 <= input_pipeline_phase0(1) * coeffphase1_3;

  product_phase0_4 <= input_pipeline_phase0(2) * coeffphase1_4;

  product_phase0_5 <= input_pipeline_phase0(3) * coeffphase1_5;

  product_phase1_1 <= input_pipeline_phase1(0) * coeffphase2_1;

  product_phase1_2 <= input_pipeline_phase1(1) * coeffphase2_2;

  product_phase1_3 <= input_pipeline_phase1(2) * coeffphase2_3;

  product_phase1_4 <= input_pipeline_phase1(3) * coeffphase2_4;

  product_phase2_1 <= input_pipeline_phase2(0) * coeffphase3_1;

  product_phase2_2 <= input_pipeline_phase2(1) * coeffphase3_2;

  product_phase2_3 <= input_pipeline_phase2(2) * coeffphase3_3;

  product_phase2_4 <= input_pipeline_phase2(3) * coeffphase3_4;

  product_phase3_1 <= input_pipeline_phase3(0) * coeffphase4_1;

  product_phase3_2 <= input_pipeline_phase3(1) * coeffphase4_2;

  product_phase3_3 <= input_pipeline_phase3(2) * coeffphase4_3;

  product_phase3_4 <= input_pipeline_phase3(3) * coeffphase4_4;

  product_phase4_1 <= input_pipeline_phase4(0) * coeffphase5_1;

  product_phase4_2 <= input_pipeline_phase4(1) * coeffphase5_2;

  product_phase4_3 <= input_pipeline_phase4(2) * coeffphase5_3;

  product_phase4_4 <= input_pipeline_phase4(3) * coeffphase5_4;

  product_phase5_1 <= input_pipeline_phase5(0) * coeffphase6_1;

  product_phase5_2 <= input_pipeline_phase5(1) * coeffphase6_2;

  product_phase5_3 <= input_pipeline_phase5(2) * coeffphase6_3;

  product_phase5_4 <= input_pipeline_phase5(3) * coeffphase6_4;

  product_phase6_1 <= input_pipeline_phase6(0) * coeffphase7_1;

  product_phase6_2 <= input_pipeline_phase6(1) * coeffphase7_2;

  product_phase6_3 <= input_pipeline_phase6(2) * coeffphase7_3;

  product_phase6_4 <= input_pipeline_phase6(3) * coeffphase7_4;

  product_phase7_1 <= input_pipeline_phase7(0) * coeffphase8_1;

  product_phase7_2 <= input_pipeline_phase7(1) * coeffphase8_2;

  product_phase7_3 <= input_pipeline_phase7(2) * coeffphase8_3;

  product_phase7_4 <= input_pipeline_phase7(3) * coeffphase8_4;

  quantized_sum <= resize(product_phase7_1, 47);

  add_temp <= resize(quantized_sum, 48) + resize(product_phase7_2, 48);
  sum1 <= add_temp(46 DOWNTO 0);

  add_temp_1 <= resize(sum1, 48) + resize(product_phase7_3, 48);
  sum2 <= add_temp_1(46 DOWNTO 0);

  add_temp_2 <= resize(sum2, 48) + resize(product_phase7_4, 48);
  sum3 <= add_temp_2(46 DOWNTO 0);

  add_temp_3 <= resize(sum3, 48) + resize(product_phase6_1, 48);
  sum4 <= add_temp_3(46 DOWNTO 0);

  add_temp_4 <= resize(sum4, 48) + resize(product_phase6_2, 48);
  sum5 <= add_temp_4(46 DOWNTO 0);

  add_temp_5 <= resize(sum5, 48) + resize(product_phase6_3, 48);
  sum6 <= add_temp_5(46 DOWNTO 0);

  add_temp_6 <= resize(sum6, 48) + resize(product_phase6_4, 48);
  sum7 <= add_temp_6(46 DOWNTO 0);

  add_temp_7 <= resize(sum7, 48) + resize(product_phase5_1, 48);
  sum8 <= add_temp_7(46 DOWNTO 0);

  add_temp_8 <= resize(sum8, 48) + resize(product_phase5_2, 48);
  sum9 <= add_temp_8(46 DOWNTO 0);

  add_temp_9 <= resize(sum9, 48) + resize(product_phase5_3, 48);
  sum10 <= add_temp_9(46 DOWNTO 0);

  add_temp_10 <= resize(sum10, 48) + resize(product_phase5_4, 48);
  sum11 <= add_temp_10(46 DOWNTO 0);

  add_temp_11 <= resize(sum11, 48) + resize(product_phase4_1, 48);
  sum12 <= add_temp_11(46 DOWNTO 0);

  add_temp_12 <= resize(sum12, 48) + resize(product_phase4_2, 48);
  sum13 <= add_temp_12(46 DOWNTO 0);

  add_temp_13 <= resize(sum13, 48) + resize(product_phase4_3, 48);
  sum14 <= add_temp_13(46 DOWNTO 0);

  add_temp_14 <= resize(sum14, 48) + resize(product_phase4_4, 48);
  sum15 <= add_temp_14(46 DOWNTO 0);

  add_temp_15 <= resize(sum15, 48) + resize(product_phase3_1, 48);
  sum16 <= add_temp_15(46 DOWNTO 0);

  add_temp_16 <= resize(sum16, 48) + resize(product_phase3_2, 48);
  sum17 <= add_temp_16(46 DOWNTO 0);

  add_temp_17 <= resize(sum17, 48) + resize(product_phase3_3, 48);
  sum18 <= add_temp_17(46 DOWNTO 0);

  add_temp_18 <= resize(sum18, 48) + resize(product_phase3_4, 48);
  sum19 <= add_temp_18(46 DOWNTO 0);

  add_temp_19 <= resize(sum19, 48) + resize(product_phase2_1, 48);
  sum20 <= add_temp_19(46 DOWNTO 0);

  add_temp_20 <= resize(sum20, 48) + resize(product_phase2_2, 48);
  sum21 <= add_temp_20(46 DOWNTO 0);

  add_temp_21 <= resize(sum21, 48) + resize(product_phase2_3, 48);
  sum22 <= add_temp_21(46 DOWNTO 0);

  add_temp_22 <= resize(sum22, 48) + resize(product_phase2_4, 48);
  sum23 <= add_temp_22(46 DOWNTO 0);

  add_temp_23 <= resize(sum23, 48) + resize(product_phase1_1, 48);
  sum24 <= add_temp_23(46 DOWNTO 0);

  add_temp_24 <= resize(sum24, 48) + resize(product_phase1_2, 48);
  sum25 <= add_temp_24(46 DOWNTO 0);

  add_temp_25 <= resize(sum25, 48) + resize(product_phase1_3, 48);
  sum26 <= add_temp_25(46 DOWNTO 0);

  add_temp_26 <= resize(sum26, 48) + resize(product_phase1_4, 48);
  sum27 <= add_temp_26(46 DOWNTO 0);

  add_temp_27 <= resize(sum27, 48) + resize(product_phase0_1, 48);
  sum28 <= add_temp_27(46 DOWNTO 0);

  add_temp_28 <= resize(sum28, 48) + resize(product_phase0_2, 48);
  sum29 <= add_temp_28(46 DOWNTO 0);

  add_temp_29 <= resize(sum29, 48) + resize(product_phase0_3, 48);
  sum30 <= add_temp_29(46 DOWNTO 0);

  add_temp_30 <= resize(sum30, 48) + resize(product_phase0_4, 48);
  sum31 <= add_temp_30(46 DOWNTO 0);

  add_temp_31 <= resize(sum31, 48) + resize(product_phase0_5, 48);
  sum32 <= add_temp_31(46 DOWNTO 0);

  output_typeconvert <= sum32;

  output_register_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      output_register <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_7 = '1' THEN
        output_register <= output_typeconvert;
      END IF;
    END IF; 
  END PROCESS output_register_process;

  -- Assignment Statements
  ce_out <= ce_out_reg;
  filter_out <= std_logic_vector(output_register);
END rtl;
